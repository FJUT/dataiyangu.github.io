<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leesin&#39;s Blog</title>
  
  <subtitle>To be a better me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mmmmmm.me/"/>
  <updated>2019-02-07T08:54:44.844Z</updated>
  <id>http://mmmmmm.me/</id>
  
  <author>
    <name>Leesin.Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo next主题深度优化(十一)，next主题中加入scrollReveal.js，让文章随着鼠标的滚动，出现点小动作。</title>
    <link href="http://mmmmmm.me/2019-02-07.html"/>
    <id>http://mmmmmm.me/2019-02-07.html</id>
    <published>2019-02-07T11:20:01.000Z</published>
    <updated>2019-02-07T08:54:44.844Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><a href="https://mmmmmm.me">https://mmmmmm.me</a></p><h1 id="scrollReveal简单介绍以及简单操作"><a href="#scrollReveal简单介绍以及简单操作" class="headerlink" title="scrollReveal简单介绍以及简单操作"></a>scrollReveal简单介绍以及简单操作</h1><p>就是在鼠标滑动的时候，页面中的某个模块会动态的加载出来，不会显得那么突兀，增加页面的动态效果。</p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="http://www.dowebok.com/134.html" target="_blank" rel="noopener">http://www.dowebok.com/134.html</a><br><a href="https://blog.csdn.net/lp2659359879/article/details/52582892" target="_blank" rel="noopener">https://blog.csdn.net/lp2659359879/article/details/52582892</a></p><h1 id="next主题中加入scrollReveal"><a href="#next主题中加入scrollReveal" class="headerlink" title="next主题中加入scrollReveal"></a>next主题中加入scrollReveal</h1><h2 id="给article标签添加属性"><a href="#给article标签添加属性" class="headerlink" title="给article标签添加属性"></a>给article标签添加属性</h2><p>进入目录themes/next/layout/_macro/post.swig<br>搜索到article标签的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;article data-scroll-reveal=<span class="string">"enter bottom move 60px over 0.6s after 0.05s"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;&#123; post_class &#125;&#125;"</span> itemscope itemtype=<span class="string">"http://schema.org/Article"</span>&gt;</span><br></pre></td></tr></table></figure><p>如上面的代码data-scroll-reveal=”enter bottom move 60px over 0.6s after 0.05s”，具体的值自行修改。</p><h2 id="本地引入依赖并且编写启动函数"><a href="#本地引入依赖并且编写启动函数" class="headerlink" title="本地引入依赖并且编写启动函数"></a>本地引入依赖并且编写启动函数</h2><p>目录如图：<br><img alt="" data-original="/images/15495295478467.png"></p><p>scrollReveal是我们需要引入的官方的js<br>my_scrollReveal.js（我自定义的启动函数）如下<br>tip:这里我尝试通过js将data-scroll-reveal动态的加入到article中，可能是因为 window.scrollReveal 初始化的操作，会导致报错（数组越界），所以最后通过直接在post.swig文件中添加属性。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果刷新的页面不是首页，即点进去的文章的话，就不进行scrollReveal的操作</span></span><br><span class="line"><span class="comment">//因为在点进去的文章还是article标签包着的。</span></span><br><span class="line"><span class="comment">//我这里是根据pathname即浏览器访问地址进行判断的</span></span><br><span class="line"><span class="keyword">var</span> pathname = <span class="built_in">window</span>.location.pathname</span><br><span class="line"><span class="keyword">if</span> (pathname.indexOf(<span class="string">"html"</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//config默认配置，不过我用着好像不起作用，这里没有研究明白</span></span><br><span class="line">  <span class="keyword">var</span> config = &#123;</span><br><span class="line">    enter: <span class="string">'right'</span>,</span><br><span class="line">    move: <span class="string">'40px'</span>,</span><br><span class="line">    over: <span class="string">'3s'</span>,</span><br><span class="line">    after: <span class="string">'5'</span>,</span><br><span class="line">    reset: <span class="literal">true</span>,</span><br><span class="line">    init: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//根据初始化配置创建一个scrollReveal对象</span></span><br><span class="line">  <span class="built_in">window</span>.scrollReveal = <span class="keyword">new</span> scrollReveal(config);</span><br><span class="line">  <span class="comment">//初始化，会自动去页面中找到含有 data-scroll-reveal 属性的地方进行相关的操作。</span></span><br><span class="line">  scrollReveal.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="修改require-js主函数"><a href="#修改require-js主函数" class="headerlink" title="修改require.js主函数"></a>修改require.js主函数</h2><p>因为在我的next中我应用了require，所以经引用上面两个js的操作放到了这里。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  waitSeconds: <span class="number">0</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"music"</span>: <span class="string">"/dist/music"</span>,</span><br><span class="line">    <span class="comment">//目前会消耗较多的性能，以后可能会去掉。</span></span><br><span class="line">    <span class="string">"aplayer"</span>: <span class="string">"/js/src/aplayer"</span>,</span><br><span class="line">    <span class="string">"backgroudLine"</span>: <span class="string">"/js/src/backgroudLine"</span>,</span><br><span class="line">    <span class="string">"category"</span>: <span class="string">"/js/src/category"</span>,</span><br><span class="line">    <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">    <span class="comment">/*不显示图标的话替换fonts*/</span></span><br><span class="line">    <span class="string">"share"</span>:<span class="string">"/js/src/pjax/share"</span>,</span><br><span class="line">    <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span>,</span><br><span class="line">    <span class="string">"comments"</span>:<span class="string">"/js/src/pjax/comments_git"</span>,</span><br><span class="line">    <span class="string">"love"</span>:<span class="string">"/js/src/love"</span>,</span><br><span class="line">    <span class="string">"eye"</span>:<span class="string">"/js/src/pjax/eye"</span>,</span><br><span class="line">    <span class="string">"header_left"</span>:<span class="string">"/js/src/pjax/header_left"</span>,</span><br><span class="line">    <span class="string">"article_top"</span>:<span class="string">"/js/src/pjax/article_top"</span>,</span><br><span class="line">    <span class="string">"easing"</span>:<span class="string">"/js/src/pjax/easing/jquery.easing.1.3"</span>,</span><br><span class="line">    <span class="string">"scrollReveal"</span>:<span class="string">"/js/src/pjax/scrollReveal/scrollReveal"</span>,</span><br><span class="line">    <span class="string">"my_scrollReveal"</span>:<span class="string">"/js/src/pjax/scrollReveal/my_scrollReveal"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  shim: &#123;</span><br><span class="line">    <span class="string">'share'</span>: &#123;</span><br><span class="line">      deps: [</span><br><span class="line">        <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'comments'</span>: &#123;</span><br><span class="line">      deps: [</span><br><span class="line">        <span class="string">'css!/js/src/pjax/comments/gitalk'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'header_left'</span>: &#123;</span><br><span class="line">      deps: [</span><br><span class="line">        <span class="string">'easing'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'my_scrollReveal'</span>:&#123;</span><br><span class="line">      deps:[</span><br><span class="line">        <span class="string">'scrollReveal'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'backgroudLine'</span>,<span class="string">'music'</span>,<span class="string">'aplayer'</span>,<span class="string">'category'</span>,<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>,<span class="string">'comments'</span>,<span class="string">'love'</span>,<span class="string">'eye'</span>,</span><br><span class="line"><span class="string">'header_left'</span>,<span class="string">'article_top'</span>,<span class="string">'easing'</span>,<span class="string">'scrollReveal'</span>,<span class="string">'my_scrollReveal'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>在最后加入了scrollReveal和my_scrollReveal这两个函数，分别对应于引入官方的js和自定义的启动函数。</p><h1 id="修改pjax的函数"><a href="#修改pjax的函数" class="headerlink" title="修改pjax的函数"></a>修改pjax的函数</h1><p>如果没有加入pjax的看到上面就结束了，我这里应用的pjax所以记录下。<br>通过require引入的方式，发现并不能成功，<br>并且报错：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pjaxMain.js:<span class="number">78</span> Uncaught <span class="built_in">TypeError</span>: scrollReveal is not a <span class="keyword">constructor</span></span><br><span class="line">    at pjaxMain.js:78</span><br><span class="line">    at Object.execCb (require.js:30)</span><br><span class="line">    at $.check (require.js:19)</span><br><span class="line">    at $.enable (require.js:24)</span><br><span class="line">    at $.init (require.js:18)</span><br><span class="line">    at require.js:27</span><br></pre></td></tr></table></figure><p></p><p>也是是说并没有定义，而且有时候会出现pjax处理后第一次没问题，第二次就又会报出同样的错误。<br>最后解决的方法是将上面官方的js和自己写的js封装在一个函数中然后通过我的pjax函数进行引用（跳转和回退）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*pjax主函数*/</span></span><br><span class="line">$(<span class="built_in">document</span>).pjax(<span class="string">'a[target!=_blank]'</span>, <span class="string">'#pjax-container'</span>, &#123;</span><br><span class="line">  fragment: <span class="string">'#pjax-container'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//用户通过浏览器的前进后退按钮，需要加载的js</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'popstate.pjax'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*必须加*/</span></span><br><span class="line">  <span class="comment">// $(document).on('pjax:complete',</span></span><br><span class="line">  <span class="comment">//   function () &#123;</span></span><br><span class="line">      pjax();</span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:start'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).unbind(<span class="string">'keyup'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:complete'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>.config(&#123;</span><br><span class="line">      waitSeconds: <span class="number">0</span>,</span><br><span class="line">      paths: &#123;</span><br><span class="line">        <span class="comment">//这个是单独的</span></span><br><span class="line">        <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">        <span class="comment">// "share":"/js/src/pjax/share",</span></span><br><span class="line">        <span class="comment">//这个也是单独的</span></span><br><span class="line">        <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span>,</span><br><span class="line">        <span class="string">"pjax_function_public"</span>:<span class="string">"/js/src/pjax/pjax_function_public"</span>,</span><br><span class="line">        <span class="string">"comments"</span>:<span class="string">"/js/src/pjax/comments_git"</span>,</span><br><span class="line">        <span class="string">"love"</span>:<span class="string">"/js/src/love"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      shim: &#123;</span><br><span class="line">        <span class="string">'share'</span>: &#123;</span><br><span class="line">          deps: [</span><br><span class="line">            <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'comments'</span>: &#123;</span><br><span class="line">          deps: [</span><br><span class="line">            <span class="string">'css!/js/src/pjax/comments/gitalk'</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>,<span class="string">'pjax_function_public'</span>,<span class="string">'comments'</span></span><br><span class="line">    ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pjax();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*来必力评论*/</span></span><br><span class="line"> <span class="comment">//    comments_js();</span></span><br><span class="line"><span class="comment">/*gitalk评论*/</span></span><br><span class="line">  gitalk();</span><br><span class="line">  <span class="comment">//护眼</span></span><br><span class="line">  eye_js()</span><br><span class="line">    <span class="comment">//如果是文章，实现滚动效果</span></span><br><span class="line">  article_top_js();</span><br><span class="line"><span class="comment">//不蒜子</span></span><br><span class="line">  busuanzi_js();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//自己写的分享</span></span><br><span class="line">  pjaxshare();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类的js</span></span><br><span class="line">  category_js();</span><br><span class="line"><span class="comment">// 局部刷新后文章内容不显示bug的js</span></span><br><span class="line">  opacity_js()</span><br><span class="line"><span class="comment">//点击有目录的文章sidebar不显示的bug解决</span></span><br><span class="line">  motion_js()</span><br><span class="line">  scrollspy_js()</span><br><span class="line">  <span class="comment">//utils_js()</span></span><br><span class="line">  postdetails_js()</span><br><span class="line"><span class="comment">//lean数量统计的js，原来的js是在themes/next/layout/_third-party/analytics/lean-analytics.swig文件中</span></span><br><span class="line">  lean_analytics();</span><br><span class="line">  <span class="comment">//百度推送js</span></span><br><span class="line">  baidutuisong();</span><br><span class="line"><span class="comment">//     //右边sidebar滚轮效果消失了。</span></span><br><span class="line">  initSidebarDimension()</span><br><span class="line">  <span class="comment">//懒加载</span></span><br><span class="line">  lazyLoad();</span><br><span class="line">  <span class="comment">//捐赠的函数</span></span><br><span class="line">  donate();</span><br><span class="line">  <span class="comment">//随鼠标的滚动文章动态出现的动画</span></span><br><span class="line">  my_scrollReveal_js();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h
      
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计学习笔记（五）：JDK并发包(各种同步控制工具的使用、并发容器及典型源码分析（Hashmap等）)</title>
    <link href="http://mmmmmm.me/2019-01-31-3.html"/>
    <id>http://mmmmmm.me/2019-01-31-3.html</id>
    <published>2019-01-18T11:20:04.000Z</published>
    <updated>2019-01-30T23:48:37.688Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="1-各种同步控制工具的使用"><a href="#1-各种同步控制工具的使用" class="headerlink" title="1. 各种同步控制工具的使用"></a>1. 各种同步控制工具的使用</h1><h2 id="1-1-ReentrantLock"><a href="#1-1-ReentrantLock" class="headerlink" title="1.1. ReentrantLock"></a>1.1. ReentrantLock</h2><p>在synchronize的基础上新加了功能，如果是特别简单的场景，两者是没有太大的区别的。</p><h3 id="1-1-1-可重入"><a href="#1-1-1-可重入" class="headerlink" title="1.1.1.可重入"></a>1.1.1.可重入</h3><p>单线程可以重复进入，但要重复退出<br>对于同一个线程，自己是可以重复进入的，否则会把自己卡死。<br>结论：<br>重入锁是可重复获得资源的锁，已经获得锁的线程可以对当前的资源重入加锁而不会引起阻塞；不可重入锁是不可重复获得资源的锁，当已经获得锁的线程对当前资源再次加锁时，会把自己阻塞</p><p>广义上的可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁（前提得是同一个对象或者class），这样的锁就叫做可重入锁。ReentrantLock和synchronized都是可重入锁，下面是一个用synchronized实现的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ReentrantTest</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public synchronized <span class="keyword">void</span> get() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        set();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized <span class="keyword">void</span> set() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> run() &#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        ReentrantTest rt = <span class="keyword">new</span> ReentrantTest();</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(rt).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程没有发生死锁的情况，截取一部分输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread<span class="number">-8492</span></span><br><span class="line">Thread<span class="number">-8492</span></span><br><span class="line">Thread<span class="number">-8494</span></span><br><span class="line">Thread<span class="number">-8494</span></span><br><span class="line">Thread<span class="number">-8495</span></span><br><span class="line">Thread<span class="number">-8495</span></span><br><span class="line">Thread<span class="number">-8493</span></span><br><span class="line">Thread<span class="number">-8493</span></span><br></pre></td></tr></table></figure><p>set()和get()同时输出了线程名称，表明即使递归使用synchronized也没有发生死锁，证明其是可重入的。</p><p>以上原文：<a href="https://blog.csdn.net/rickiyeat/article/details/78314451" target="_blank" rel="noopener">https://blog.csdn.net/rickiyeat/article/details/78314451</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">public <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">public <span class="keyword">static</span> int i = <span class="number">0</span>;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//不论如何都进行unlock</span></span><br><span class="line"><span class="comment">//加两次锁必须解锁两次。</span></span><br><span class="line">lock.unlock();</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//synchronize只要在大括号外面，出了大括号，虚拟机会自动释放锁，可是lock是通过unlock来控制什么时候释放锁</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Lock tl = <span class="keyword">new</span> Lock();</span><br><span class="line"><span class="comment">//同时开两个一样的线程</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tl);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tl);</span><br><span class="line">t1.start();t2.start();</span><br><span class="line">t1.join();t2.join();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20000</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-可中断-lockInterruptibly"><a href="#1-1-2-可中断-lockInterruptibly" class="headerlink" title="1.1.2. 可中断 lockInterruptibly()"></a>1.1.2. 可中断 lockInterruptibly()</h3><p>在发生死锁或者其他的导致长期等待的情况，希望锁停下来的功能，synchronize没有这个功能，ReentrantLock提供了可中断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Interruptible</span>  <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">public <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">public <span class="keyword">static</span> ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">int lock;</span><br><span class="line">public Interruptible(int lock)&#123;</span><br><span class="line"><span class="keyword">this</span>.lock = lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//lock=1的时候lock1上锁,lock=2的时候lock2上锁，刚才的lock1上了锁</span></span><br><span class="line"><span class="comment">//之后还要给lock2上锁,lock2上了锁之后还要给lock1上锁，</span></span><br><span class="line"><span class="comment">// 可是lock2在lock=2的时候被locl=2拿到了，lock1在lock=1的时候</span></span><br><span class="line"><span class="comment">//被locl=1拿到了所以形成了死锁</span></span><br><span class="line"><span class="keyword">if</span> (lock == <span class="number">1</span>)&#123;</span><br><span class="line">lock1.lockInterruptibly();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">lock2.lockInterruptibly();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">lock2.lockInterruptibly();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">lock1.lockInterruptibly();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//如果lock1还拿着这把锁的话，就解掉。</span></span><br><span class="line"><span class="keyword">if</span> (lock1.isHeldByCurrentThread())</span><br><span class="line">lock1.unlock();</span><br><span class="line"><span class="keyword">if</span> (lock2.isHeldByCurrentThread())</span><br><span class="line">lock2.unlock();</span><br><span class="line">System.out.println(Thread.currentThread().getId()+<span class="string">":线程退出"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Interruptible interruptible1 = <span class="keyword">new</span> Interruptible(<span class="number">1</span>);</span><br><span class="line">Interruptible interruptible2 = <span class="keyword">new</span> Interruptible(<span class="number">2</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(interruptible1);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(interruptible2);</span><br><span class="line">t1.start();t2.start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">DeadlockChecker.check();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeadlockChecker.check();如果将这句话注释，将会进行无限期的死锁。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DeadLockChecker</span> </span>&#123;</span><br><span class="line">private final <span class="keyword">static</span> ThreadMXBean mbean = ManagementFactory.getThreadMXBean();</span><br><span class="line">final  <span class="keyword">static</span>  Runnable deadLockCheck = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">long [] deadLockedThreadIds = mbean.findDeadlockedThreads();</span><br><span class="line"><span class="keyword">if</span> (deadLockedThreadIds != <span class="literal">null</span>) &#123;</span><br><span class="line">ThreadInfo[] threadInfos = mbean.getThreadInfo(deadLockedThreadIds);</span><br><span class="line"><span class="keyword">for</span> (Thread t : Thread.getAllStackTraces().keySet()) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i&lt;threadInfos.length ; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (t.getId() == threadInfos[i].getThreadId()) &#123;</span><br><span class="line">t.interrupt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> check()&#123;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(deadLockCheck);</span><br><span class="line">t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="1-1-3-可限时"><a href="#1-1-3-可限时" class="headerlink" title="1.1.3. 可限时"></a>1.1.3. 可限时</h3><p>超时不能获得锁，就返回false，不会永久等待构成死锁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TimeLock</span> <span class="title">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">public <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//如果线程在5秒之内没有拿到锁就走else里面的内容</span></span><br><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"get lock failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">TimeLock tl = <span class="keyword">new</span> TimeLock();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tl);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-公平锁"><a href="#1-1-4-公平锁" class="headerlink" title="1.1.4. 公平锁"></a>1.1.4. 公平锁</h3><p>什么是公平锁？<br>先来先得，避免产生饥饿现象，但是性能差很多。所以不是特殊情况下，不要使用公平锁。<br>public ReentrantLock(boolean fair)<br>public static ReentrantLock fairLock = new ReentrantLock(true);</p><h2 id="1-2-Condition"><a href="#1-2-Condition" class="headerlink" title="1.2. Condition"></a>1.2. Condition</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1. 概述"></a>1.2.1. 概述</h3><p>类似于 Object.wait()和Object.notify() 与ReentrantLock结合使用</p><h3 id="1-2-2-主要接口"><a href="#1-2-2-主要接口" class="headerlink" title="1.2.2. 主要接口"></a>1.2.2. 主要接口</h3><p>void await() throws InterruptedException;//等待<br>void awaitUninterruptibly();<br>long awaitNanos(long nanosTimeout) throws InterruptedException; boolean await(long time, TimeUnit unit) throws InterruptedException; boolean awaitUntil(Date deadline) throws InterruptedException;<br>void signal();//通知继续往下走<br>void signalAll();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ReenTerLockCondition</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">public <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line">condition.await();</span><br><span class="line">System.out.println(<span class="string">"Thread is going on "</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">ReenTerLockCondition tl = <span class="keyword">new</span> ReenTerLockCondition();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tl);</span><br><span class="line">t1.start();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">lock.lock();</span><br><span class="line">condition.signal();</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须在lock和unlock执行完了之后才会到上面将t1的锁解开。</span></span><br><span class="line"><span class="comment">//类似于之前的Synchronize代码块。</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-API详解"><a href="#1-2-3-API详解" class="headerlink" title="1.2.3. API详解"></a>1.2.3. API详解</h3><p>await()方法会使当前线程等待，同时释放当前锁，当其他线程中使用signal()时或者signalAll()方法时，线<br>程会重新获得锁并继续执行。或者当线程被中断时，也能跳出等待。这和Object.wait()方法很相似。</p><p>awaitUninterruptibly()方法与await()方法基本相同，但是它并不会再等待过程中响应中断。不会被中断。<br>singal()方法用于唤醒一个在等待中的线程。相对的singalAll()方法会唤醒所有在等待中的线程。这和Obej ct.notify()方法很类似。</p><h2 id="1-3-Semaphore"><a href="#1-3-Semaphore" class="headerlink" title="1.3. Semaphore"></a>1.3. Semaphore</h2><p><strong><font color="red">信号量<br>互斥的、排他的<br>可以有多个线程去共享这个临界区，广义上的锁，比如每个信号量指定十个许可，每个许可分配若干个线程，当然每个线程也可以持有多个许可，如果有多余的许可就可以进入，如果没有许可，后面的线程就必须等待，不能进入。<br>信号量允许多个线程进入临界区，信号量的许可等于一的时候就相当于一把锁。</font></strong></p><h3 id="1-3-1-概述"><a href="#1-3-1-概述" class="headerlink" title="1.3.1. 概述"></a>1.3.1. 概述</h3><p>共享锁 运行多个线程同时临界区</p><h3 id="1-3-2-主要接口"><a href="#1-3-2-主要接口" class="headerlink" title="1.3.2. 主要接口"></a>1.3.2. 主要接口</h3><p>public void acquire()//获得信号量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> acquire() throws InterruptedException &#123;</span><br><span class="line">       sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//也可以拿到多个许可</span></span><br><span class="line">public <span class="keyword">void</span> acquire(int permits) throws InterruptedException &#123;</span><br><span class="line">       <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       sync.acquireSharedInterruptibly(permits);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>public void acquireUninterruptibly()//不支持中断的获得信号量<br>public boolean tryAcquire()//不会等待，只是试一试，拿不到就返回false<br>public boolean tryAcquire(long timeout, TimeUnit unit)//try的时间，等待的时间，和上线功能差差不多<br>public void release()释放。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span>  <span class="title">SemapDemo</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">final Semaphore semp = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//也可以semp.acquire(2);下面将会每两个线程输出一次</span></span><br><span class="line">semp.acquire();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">System.out.println(Thread.currentThread().getId()+<span class="string">":done!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">semp.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">ExecutorService exec = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">final SemapDemo demo = <span class="keyword">new</span> SemapDemo();</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">exec.submit(demo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:done!</span><br><span class="line"><span class="number">19</span>:done!</span><br><span class="line"><span class="number">12</span>:done!</span><br><span class="line"><span class="number">10</span>:done!</span><br><span class="line"><span class="number">13</span>:done!</span><br><span class="line"><span class="number">14</span>:done!</span><br><span class="line"><span class="number">15</span>:done!</span><br><span class="line"><span class="number">18</span>:done!</span><br><span class="line"><span class="number">17</span>:done!</span><br><span class="line"><span class="number">16</span>:done!</span><br><span class="line"><span class="number">20</span>:done!</span><br><span class="line"><span class="number">22</span>:done!</span><br><span class="line"><span class="number">23</span>:done!</span><br><span class="line"><span class="number">21</span>:done!</span><br><span class="line"><span class="number">19</span>:done!</span><br><span class="line"><span class="number">25</span>:done!</span><br><span class="line"><span class="number">28</span>:done!</span><br><span class="line"><span class="number">24</span>:done!</span><br><span class="line"><span class="number">27</span>:done!</span><br><span class="line"><span class="number">26</span>:done!</span><br></pre></td></tr></table></figure><p>可以看到每五个线程输出一次，每次停留两秒，同样的如果semp.acquire(2);每个线程拿到两个许可，一共有五个许可，release（2），所以每次只有两个线程输出。</p><h2 id="1-4-ReadWriteLock"><a href="#1-4-ReadWriteLock" class="headerlink" title="1.4. ReadWriteLock"></a>1.4. ReadWriteLock</h2><p>写会修改数据，读不会修改数据，从性能上来看，如果不管读还是写都加锁，会十分影响性能，synchronized并行度只有一，一次只允许一个线程经过。如果没有写操作，这个所有的read线程必然是无等待的。</p><h3 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1.4.1. 概述"></a>1.4.1. 概述</h3><p>ReadWriteLock是JDK5中提供的读写分离锁</p><h3 id="1-4-2-访问情况"><a href="#1-4-2-访问情况" class="headerlink" title="1.4.2. 访问情况"></a>1.4.2. 访问情况</h3><p>读-读不互斥:读读之间不阻塞。<br>读-写互斥:读阻塞写，写也会阻塞读。<br>写-写互斥:写写阻塞。<br><img alt="" data-original="/images/15488916638470.png"></p><h3 id="1-4-3-主要接口"><a href="#1-4-3-主要接口" class="headerlink" title="1.4.3. 主要接口"></a>1.4.3. 主要接口</h3><p>private static ReentrantReadWriteLock readWriteLock=newReentrantReadWriteLock();<br>private static Lock readLock = readWriteLock.readLock();<br>获得readLock，然后通过readLock.lock()惊醒操作<br>private static Lock writeLock = readWriteLock.writeLock();<br>获得readLock，然后通过readLock.lock()惊醒操作</p><h2 id="1-5-CountDownLatch"><a href="#1-5-CountDownLatch" class="headerlink" title="1.5. CountDownLatch"></a>1.5. CountDownLatch</h2><h3 id="1-5-1-概述"><a href="#1-5-1-概述" class="headerlink" title="1.5.1. 概述"></a>1.5.1. 概述</h3><p>倒数计时器 一种典型的场景就是火箭发射。在火箭发射前，为了保证万无一失，往往还要进行各项设备、仪器的检查。 只有等所有检查完毕后，引擎才能点火。这种场景就非常适合使用CountDownLatch。它可以使得点火线程 ，等待所有检查线程全部完工后，再执行</p><h3 id="1-5-2-主要接口"><a href="#1-5-2-主要接口" class="headerlink" title="1.5.2. 主要接口"></a>1.5.2. 主要接口</h3><p>static final CountDownLatch end = new CountDownLatch(10); //加入有十个检查项（十个线程）<br>end.countDown();//没通过一个就减一<br>end.await();//见到最后就返回，执行比如发射火箭的操作</p><h3 id="1-5-3-示意图"><a href="#1-5-3-示意图" class="headerlink" title="1.5.3. 示意图"></a>1.5.3. 示意图</h3><p><img alt="" data-original="/images/15488916716971.png"></p><p>主线程在这里等待，等到所有的检查任务都到达临界点之后，主线程就继续执行。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> final CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);<span class="comment">//开启十个线程来进行检查</span></span><br><span class="line"><span class="keyword">static</span> final CountDownLatchDemo demo = <span class="keyword">new</span> CountDownLatchDemo();</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)*<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"check complete"</span>);</span><br><span class="line">end.countDown();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">ExecutorService exec = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">exec.submit(demo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等待检查</span></span><br><span class="line">end.await();</span><br><span class="line"><span class="comment">//发射火箭</span></span><br><span class="line">System.out.println(<span class="string">"Fire"</span>);</span><br><span class="line">exec.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">check complete</span><br><span class="line">Fire</span><br></pre></td></tr></table></figure><h2 id="1-6-CyclicBarrier"><a href="#1-6-CyclicBarrier" class="headerlink" title="1.6. CyclicBarrier"></a>1.6. CyclicBarrier</h2><h3 id="1-6-1-概述"><a href="#1-6-1-概述" class="headerlink" title="1.6.1. 概述"></a>1.6.1. 概述</h3><p>循环栅栏 Cyclic意为循环，也就是说这个计数器可以反复使用。比如，假设我们将计数器设置为10。那么凑齐第一批1 0个线程后，计数器就会归零，然后接着凑齐下一批10个线程<br>它和CountDownLatch的区别是CountDownLatch的计数器只能有一次，而CyclicBarrier可以再重复利用。</p><h3 id="1-6-2-主要接口"><a href="#1-6-2-主要接口" class="headerlink" title="1.6.2. 主要接口"></a>1.6.2. 主要接口</h3><p>public CyclicBarrier(int parties（几个参与者相当于上一节中的10）, Runnable barrierAction（所有的线程到了之后，栅栏（系统）执行的动作）)<br>barrierAction就是当计数器一次计数完成后，系统会执行的动作<br>await() //都到了之后再往下执行</p><h3 id="1-6-3-示意图"><a href="#1-6-3-示意图" class="headerlink" title="1.6.3. 示意图"></a>1.6.3. 示意图</h3><p><img alt="" data-original="/images/15488917438815.png"></p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">private <span class="built_in">String</span> soldier;</span><br><span class="line">private final CyclicBarrier cyclic;</span><br><span class="line"></span><br><span class="line">Soldier(CyclicBarrier cyclic,<span class="built_in">String</span> soldierName) &#123;</span><br><span class="line"><span class="keyword">this</span>.soldier = soldierName;</span><br><span class="line"><span class="keyword">this</span>.cyclic = cyclic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cyclic.await();</span><br><span class="line">doWork();</span><br><span class="line">cyclic.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> doWork()&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="built_in">Math</span>.abs(<span class="keyword">new</span> Random().nextInt()%<span class="number">10000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(soldier+<span class="string">":任务完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrierRun</span> <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">boolean flag;</span><br><span class="line">int N;</span><br><span class="line"></span><br><span class="line">public BarrierRun(boolean flag, int N) &#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line"><span class="keyword">this</span>.N = N;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"司令:[士兵"</span>+N+<span class="string">"个，任务完成！]"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"司令:[士兵"</span>+N+<span class="string">"个，集合完毕！]"</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">final int N = <span class="number">10</span>;</span><br><span class="line">Thread[] allSoldier = <span class="keyword">new</span> Thread[N];</span><br><span class="line">boolean flag = <span class="literal">false</span>;</span><br><span class="line">CyclicBarrier cyclic = <span class="keyword">new</span> CyclicBarrier(N, <span class="keyword">new</span> BarrierRun(flag, N));</span><br><span class="line">System.out.println(<span class="string">"集合队伍!"</span>);</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;N ; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"士兵"</span>+i+<span class="string">"报道！"</span>);</span><br><span class="line">allSoldier[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Soldier(cyclic, <span class="string">"士兵"</span> + i));</span><br><span class="line">allSoldier[i].start();</span><br><span class="line"><span class="comment">//if (i == 5) &#123;</span></span><br><span class="line"><span class="comment">//allSoldier[0].interrupt();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">集合队伍！</span><br><span class="line">士兵<span class="number">0</span>报道</span><br><span class="line">士兵<span class="number">1</span>报道</span><br><span class="line">士兵<span class="number">2</span>报道</span><br><span class="line">士兵<span class="number">3</span>报道</span><br><span class="line">士兵<span class="number">4</span>报道</span><br><span class="line">士兵<span class="number">5</span>报道</span><br><span class="line">士兵<span class="number">6</span>报道</span><br><span class="line">士兵<span class="number">7</span>报道</span><br><span class="line">士兵<span class="number">8</span>报道</span><br><span class="line">士兵<span class="number">9</span>报道</span><br><span class="line">司令[士兵<span class="number">10</span>个，集合完毕！]</span><br><span class="line">士兵<span class="number">2</span>：任务完成</span><br><span class="line">士兵<span class="number">7</span>：任务完成</span><br><span class="line">士兵<span class="number">0</span>：任务完成</span><br><span class="line">士兵<span class="number">4</span>：任务完成</span><br><span class="line">士兵<span class="number">3</span>：任务完成</span><br><span class="line">士兵<span class="number">9</span>：任务完成</span><br><span class="line">士兵<span class="number">6</span>：任务完成</span><br><span class="line">士兵<span class="number">8</span>：任务完成</span><br><span class="line">士兵<span class="number">1</span>：任务完成</span><br><span class="line">士兵<span class="number">5</span>：任务完成</span><br><span class="line">司令：[士兵<span class="number">10</span>个，任务完成！]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if (i == 5) &#123;</span></span><br><span class="line"><span class="comment">//allSoldier[0].interrupt();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>将这个注释打开的话<br><img alt="" data-original="/images/15488919151578.png"></p><p>第零个终端之后，将会抛出InterruptedException异常，剩下的九个线程将会抛出BrokenBarrierException异常。</p><h2 id="1-7-LockSupport"><a href="#1-7-LockSupport" class="headerlink" title="1.7. LockSupport"></a>1.7. LockSupport</h2><h3 id="1-7-1-概述"><a href="#1-7-1-概述" class="headerlink" title="1.7.1. 概述"></a>1.7.1. 概述</h3><p>比较偏底层。<br>提供线程阻塞原语<br>挂起</p><h3 id="1-7-2-主要接口"><a href="#1-7-2-主要接口" class="headerlink" title="1.7.2. 主要接口"></a>1.7.2. 主要接口</h3><p>LockSupport.park(); //停下来、挂起，将线程挂起，除非许可是可用的。<br>LockSupport.unpark(t1);//将t1继续执行，使得许可是可用的</p><h3 id="1-7-3-与suspend-比较"><a href="#1-7-3-与suspend-比较" class="headerlink" title="1.7.3. 与suspend()比较"></a>1.7.3. 与suspend()比较</h3><p>LockSupport不容易引起线程冻结，suspend将来可能会被废弃。<br>有点类似于信号量中的许可，如果unpark发生在park之前，park并不会将线程阻塞住。<br>如果rewiew发生在suspend之前，suspend就不能再继续执行了，永久挂起。</p><h3 id="1-7-4-中断响应"><a href="#1-7-4-中断响应" class="headerlink" title="1.7.4. 中断响应"></a>1.7.4. 中断响应</h3><p>wait等是能够try catch 终端异常的，但是park是没有捕获这个异常的，所以：<br>能够响应中断，但不抛出异常。<br>中断响应的结果是，park()函数的返回，可以从Thread.interrupted()得到中断标志</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">Object</span> u = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">static</span> ChangeObjectThread t1 = <span class="keyword">new</span> ChangeObjectThread(<span class="string">"t1"</span>);</span><br><span class="line"><span class="keyword">static</span> ChangeObjectThread t2 = <span class="keyword">new</span> ChangeObjectThread(<span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeObjectThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">public ChangeObjectThread(<span class="built_in">String</span> name) &#123;</span><br><span class="line"><span class="keyword">super</span>.setName(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line">synchronized (u)&#123;</span><br><span class="line">System.out.println(<span class="string">"in"</span>+getName());</span><br><span class="line">LockSupport.park();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">t1.start();</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">t2.start();</span><br><span class="line">LockSupport.unpark(t1);</span><br><span class="line">LockSupport.unpark(t2);</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="number">1</span> </span><br><span class="line">int <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>不论unpark在park的前面还是后面都不会阻塞。</p><h2 id="1-8-ReentrantLock-的实现"><a href="#1-8-ReentrantLock-的实现" class="headerlink" title="1.8. ReentrantLock 的实现"></a>1.8. ReentrantLock 的实现</h2><h3 id="1-8-1-CAS状态"><a href="#1-8-1-CAS状态" class="headerlink" title="1.8.1. CAS状态"></a>1.8.1. CAS状态</h3><p>锁到底有没有被人占用，通过是否到达期望值，通过值是否改变来判断是否应该拿到锁。</p><h3 id="1-8-2-等待队列"><a href="#1-8-2-等待队列" class="headerlink" title="1.8.2. 等待队列"></a>1.8.2. 等待队列</h3><p>如果没有拿到锁，线程应该怎么办呢，应该进入等待的队列，如果有多个线程进来，多个线程在队列中进行等待。</p><h3 id="1-8-3-park"><a href="#1-8-3-park" class="headerlink" title="1.8.3. park()"></a>1.8.3. park()</h3><p>在队列中的线程都进行park操作。unlock的时候，从等待的队列中挑出一个出来进行unpark操作。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">         * acquire on failure.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        final <span class="keyword">void</span> lock() &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))<span class="comment">//期望值是0，更新成1</span></span><br><span class="line">            <span class="comment">//如果成功了，便能拿到锁，就能继续往下走。</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//否则就尝试去做申请。</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        protected final boolean compareAndSetState(int expect, int update) &#123;</span><br><span class="line">        <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">     public final <span class="keyword">void</span> acquire(int arg) &#123;</span><br><span class="line">     <span class="comment">//在尝试一下，万一别人释放了呢？</span></span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果尝试了还是不行就把自己放到等待队列中去</span></span><br><span class="line">      private Node addWaiter(Node mode) &#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">        <span class="comment">//放到队列的尾巴上去。</span></span><br><span class="line">        Node pred = tail;</span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                pred.next = node;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//返回的node然后再去尝试请求锁</span></span><br><span class="line">    final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">        boolean failed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            boolean interrupted = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                final Node p = node.predecessor();</span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">//如果确实是拿不到就会在这里挂起，下面会有详细</span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过park进行挂起</span></span><br><span class="line"> private final boolean parkAndCheckInterrupt() &#123;</span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//unlock操作</span></span><br><span class="line"> public <span class="keyword">void</span> unlock() &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    public final boolean release(int arg) &#123;</span></span><br><span class="line"><span class="regexp">        if (tryRelease(arg)) &#123;</span></span><br><span class="line"><span class="regexp">            Node h = head;</span></span><br><span class="line"><span class="regexp">            if (h != null &amp;&amp; h.waitStatus != 0)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/将队列头部的node进行unpark操作</span></span><br><span class="line"><span class="regexp">                unparkSuccessor(h);</span></span><br><span class="line"><span class="regexp">            return true;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">private void unparkSuccessor(Node node) &#123;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">         * If status is negative (i.e., possibly needing signal) <span class="keyword">try</span></span><br><span class="line">         * to clear <span class="keyword">in</span> anticipation <span class="keyword">of</span> signalling.  It is OK <span class="keyword">if</span> <span class="keyword">this</span></span><br><span class="line">         * fails or <span class="keyword">if</span> status is changed by waiting thread.</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        int ws = node.waitStatus;</span></span><br><span class="line"><span class="regexp">        if (ws &lt; 0)</span></span><br><span class="line"><span class="regexp">            compareAndSetWaitStatus(node, ws, 0);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">         * Thread to unpark is held <span class="keyword">in</span> successor, which is normally</span><br><span class="line">         * just the next node.  But <span class="keyword">if</span> cancelled or apparently <span class="literal">null</span>,</span><br><span class="line">         * traverse backwards <span class="keyword">from</span> tail to find the actual</span><br><span class="line">         * non-cancelled successor.</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        Node s = node.next;</span></span><br><span class="line"><span class="regexp">        if (s == null || s.waitStatus &gt; 0) &#123;</span></span><br><span class="line"><span class="regexp">            s = null;</span></span><br><span class="line"><span class="regexp">            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</span></span><br><span class="line"><span class="regexp">                if (t.waitStatus &lt;= 0)</span></span><br><span class="line"><span class="regexp">                    s = t;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (s != null)</span></span><br><span class="line"><span class="regexp">            LockSupport.unpark(s.thread);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-并发容器及典型源码分析"><a href="#2-并发容器及典型源码分析" class="headerlink" title="2. 并发容器及典型源码分析"></a>2. 并发容器及典型源码分析</h1><h2 id="2-1-集合包装"><a href="#2-1-集合包装" class="headerlink" title="2.1. 集合包装"></a>2.1. 集合包装</h2><h3 id="2-1-1-HashMap"><a href="#2-1-1-HashMap" class="headerlink" title="2.1.1. HashMap"></a>2.1.1. HashMap</h3><p>HashMap不是一个线程安全的容器，可以通过如下的方法变成线程安全的，但是只适用于并发量比较小的情况。<br>Collections.synchronizedMap<br><img alt="" data-original="/images/15488921053227.png"></p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        private <span class="keyword">static</span> final long serialVersionUID = <span class="number">1978198479659022715</span>L;</span><br><span class="line"></span><br><span class="line">        private final <span class="built_in">Map</span>&lt;K,V&gt; m;     <span class="comment">// Backing Map</span></span><br><span class="line">        final <span class="built_in">Object</span>      mutex;        <span class="comment">// Object on which to synchronize</span></span><br><span class="line"></span><br><span class="line">        SynchronizedMap(<span class="built_in">Map</span>&lt;K,V&gt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">this</span>.m = m;</span><br><span class="line">            mutex = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SynchronizedMap(<span class="built_in">Map</span>&lt;K,V&gt; m, <span class="built_in">Object</span> mutex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.m = m;</span><br><span class="line">            <span class="keyword">this</span>.mutex = mutex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int size() &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.size();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public boolean isEmpty() &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.isEmpty();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public boolean containsKey(<span class="built_in">Object</span> key) &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.containsKey(key);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public boolean containsValue(<span class="built_in">Object</span> value) &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.containsValue(value);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public V get(<span class="built_in">Object</span> key) &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.get(key);&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public V put(K key, V value) &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.put(key, value);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public V remove(<span class="built_in">Object</span> key) &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.remove(key);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="keyword">void</span> putAll(<span class="built_in">Map</span>&lt;? extends K, ? extends V&gt; map) &#123;</span><br><span class="line">            synchronized (mutex) &#123;m.putAll(map);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="keyword">void</span> clear() &#123;</span><br><span class="line">            synchronized (mutex) &#123;m.clear();&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private transient <span class="built_in">Set</span>&lt;K&gt; keySet = <span class="literal">null</span>;</span><br><span class="line">        private transient <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&lt;K,V&gt;&gt; entrySet = <span class="literal">null</span>;</span><br><span class="line">        private transient Collection&lt;V&gt; values = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        public <span class="built_in">Set</span>&lt;K&gt; keySet() &#123;</span><br><span class="line">            synchronized (mutex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keySet==<span class="literal">null</span>)</span><br><span class="line">                    keySet = <span class="keyword">new</span> SynchronizedSet&lt;&gt;(m.keySet(), mutex);</span><br><span class="line">                <span class="keyword">return</span> keySet;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">            synchronized (mutex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entrySet==<span class="literal">null</span>)</span><br><span class="line">                    entrySet = <span class="keyword">new</span> SynchronizedSet&lt;&gt;(m.entrySet(), mutex);</span><br><span class="line">                <span class="keyword">return</span> entrySet;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Collection&lt;V&gt; values() &#123;</span><br><span class="line">            synchronized (mutex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (values==<span class="literal">null</span>)</span><br><span class="line">                    values = <span class="keyword">new</span> SynchronizedCollection&lt;&gt;(m.values(), mutex);</span><br><span class="line">                <span class="keyword">return</span> values;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean equals(<span class="built_in">Object</span> o) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.equals(o);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public int hashCode() &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.hashCode();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="built_in">String</span> toString() &#123;</span><br><span class="line">            synchronized (mutex) &#123;<span class="keyword">return</span> m.toString();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        private <span class="keyword">void</span> writeObject(ObjectOutputStream s) throws IOException &#123;</span><br><span class="line">            synchronized (mutex) &#123;s.defaultWriteObject();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过观察分析，是将map封装到了synchronizeMap中，并且，将get put 等操作都放在了Synchronize代码块中，下面的List和Set同理，因为是放在了synchronize代码块中所以是串行的不是并行的，只能适用于并发量比较小的场景。</p><h3 id="2-1-2-List"><a href="#2-1-2-List" class="headerlink" title="2.1.2. List"></a>2.1.2. List</h3><p>synchronizedList</p><h3 id="2-1-3-Set"><a href="#2-1-3-Set" class="headerlink" title="2.1.3. Set"></a>2.1.3. Set</h3><p>synchronizedSet</p><h2 id="2-2-ConcurrentHashMap"><a href="#2-2-ConcurrentHashMap" class="headerlink" title="2.2. ConcurrentHashMap"></a>2.2. ConcurrentHashMap</h2><p>高性能HashMap（解决synchronize只适用于并发量小的场景）</p><h3 id="2-2-1HashMap源码分析"><a href="#2-2-1HashMap源码分析" class="headerlink" title="2.2.1HashMap源码分析"></a>2.2.1HashMap源码分析</h3><p>HashMap内部是一个数组<br>拿put方法来看<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        int hash = hash(key);</span><br><span class="line">        int i = indexFor(hash, table.length);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="built_in">Object</span> k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入inflateTable方法</span></span><br><span class="line">  private <span class="keyword">void</span> inflateTable(int toSize) &#123;</span><br><span class="line">        <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">        int capacity = roundUpToPowerOf2(toSize);</span><br><span class="line"></span><br><span class="line">        threshold = (int) <span class="built_in">Math</span>.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看到是将疏浚存到了table中</span></span><br><span class="line">    transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line">    <span class="comment">//每一个table中是entry表象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="title">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//每个entry里面是key value next hash</span></span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        int hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates new entry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final K getKey() &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final V getValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final V setValue(V newValue) &#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final boolean equals(<span class="built_in">Object</span> o) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> <span class="built_in">Map</span>.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">Map</span>.Entry e = (<span class="built_in">Map</span>.Entry)o;</span><br><span class="line">            <span class="built_in">Object</span> k1 = getKey();</span><br><span class="line">            <span class="built_in">Object</span> k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="literal">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                <span class="built_in">Object</span> v1 = getValue();</span><br><span class="line">                <span class="built_in">Object</span> v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="literal">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final int hashCode() &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final <span class="built_in">String</span> toString() &#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is invoked whenever the value in an entry is</span></span><br><span class="line"><span class="comment">         * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class="line"><span class="comment">         * in the HashMap.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> recordAccess(HashMap&lt;K,V&gt; m) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is invoked whenever the entry is</span></span><br><span class="line"><span class="comment">         * removed from the table.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> recordRemoval(HashMap&lt;K,V&gt; m) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p><img alt="" data-original="/images/15488919681106.png"></p><p>get（key）是通过哈希算法来判断应该映射到哪个槽位的<br>两个不同的key比如，key1 key2可能被映射到同一个槽位中，这里叫做哈希冲突<br>一种解决方法是，既然你映射到了同一个槽位中，我就把你方法同一个槽位中，可是在一个entry的数组中如何放两个entry呢？？通过entry中的next指向下一个entry</p><p>事实上HashMap的内部主要实现是数组，数组中放着entry，每个entry都是链表中的一环，链表的头部，当发生大量的hash冲突的时候蜕化成一个链表。</p><p>一般情况下HashMap不会放满，因为放满之后必然产生冲突，所以一般HashMap需要预留空间</p><h3 id="2-2-2-ConcurrentHashMap源码分析"><a href="#2-2-2-ConcurrentHashMap源码分析" class="headerlink" title="2.2.2. ConcurrentHashMap源码分析"></a>2.2.2. ConcurrentHashMap源码分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">       Segment&lt;K,V&gt; s;</span><br><span class="line">       <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       int hash = hash(key);</span><br><span class="line">       int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">       <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">            (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="literal">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">           s = ensureSegment(j);</span><br><span class="line">       <span class="keyword">return</span> s.put(key, hash, value, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Segment 段<br>如果大量线程进来，会一起竞争HashMap的赋值操作<br>把大的HashMap切割成若干个小的HashMap，每个线程进来的时候，先把当前的key映射到其中的一个小HashMap中去，在小HashMap中做一个普通HashMap应该做的事情，假如大的HashMap中有十六个小的HashMap，意味着大的HashMap可以同时接受十六个线程的赋值操作，相比于之前只有一个HasnMap，性能提高了十六倍。</p><p>这里的Segment就是上面说的小HashMap，通过移位操作拿到当前的偏移量如果不存在就创建一个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private Segment&lt;K,V&gt; ensureSegment(int k) &#123;</span><br><span class="line">       final Segment&lt;K,V&gt;[] ss = <span class="keyword">this</span>.segments;</span><br><span class="line">       long u = (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line">       Segment&lt;K,V&gt; seg;</span><br><span class="line">       <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="literal">null</span>) &#123;</span><br><span class="line">           Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>]; <span class="comment">// use segment 0 as prototype</span></span><br><span class="line">           int cap = proto.table.length;</span><br><span class="line">           float lf = proto.loadFactor;</span><br><span class="line">           int threshold = (int)(cap * lf);</span><br><span class="line">           HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap];</span><br><span class="line">           <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">               == <span class="literal">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line">               Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">               <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                      == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="literal">null</span>, seg = s))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> seg;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>将第零个Segment作为原型将第k个Segment设置出来。</p><p><strong><font color="red">注意这里的put虽然是线程安全的但是并没有使用锁。<br></font></strong><br>上面的s.put():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line"> <span class="comment">//这里的tryLock还是一个CAS操作tryLock不会等待，Lock才会等待</span></span><br><span class="line">            HashEntry&lt;K,V&gt; node = tryLock() ? <span class="literal">null</span> :</span><br><span class="line">            <span class="comment">//如果trylock失败，代码在线面详细解释这个函数</span></span><br><span class="line">                scanAndLockForPut(key, hash, value);</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">                int index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">                槽位映射到index上，拿出index中的第一个</span><br><span class="line">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">                <span class="comment">//尝试将first插到entry中</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">                <span class="comment">//如果有hash冲突</span></span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                        K k;</span><br><span class="line">                        <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                            oldValue = e.value;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                e.value = value;</span><br><span class="line">                                ++modCount;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//有Hash冲突就将value串起来</span></span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果没有hash冲突</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node != <span class="literal">null</span>)</span><br><span class="line">                            node.setNext(first);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                        int c = count + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                            rehash(node);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">//就将entry set到数组中去</span></span><br><span class="line">                            setEntryAt(tab, index, node);</span><br><span class="line">                        ++modCount;</span><br><span class="line">                        count = c;</span><br><span class="line">                        oldValue = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">private HashEntry&lt;K,V&gt; scanAndLockForPut(K key, int hash, V value) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">            HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">            HashEntry&lt;K,V&gt; node = <span class="literal">null</span>;</span><br><span class="line">            int retries = <span class="number">-1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">            <span class="comment">//不断的trylock</span></span><br><span class="line">            <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">                HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">                <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                            node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        retries = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                        retries = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果trylock超过了一定的次数，就会挂起</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">                    lock();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                <span class="comment">//这里可能是hash进行了扩容重hash等操作，将retrues复制为-1，</span></span><br><span class="line">                <span class="comment">//再不断的进行trylock</span></span><br><span class="line">                         (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">                    e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">                    retries = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">这里的不断的trylock，如果到达一定的次数在挂起，是concurrentHashMap的核心优化</font></strong><br>但是注意在concurrentHashMap中有一个size操作中的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public int size() &#123;</span><br><span class="line">        <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">        <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">        final Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">        int size;</span><br><span class="line">        boolean overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">        long sum;         <span class="comment">// sum of modCounts</span></span><br><span class="line">        long last = <span class="number">0</span>L;   <span class="comment">// previous sum</span></span><br><span class="line">        int retries = <span class="number">-1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                        ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum = <span class="number">0</span>L;</span><br><span class="line">                size = <span class="number">0</span>;</span><br><span class="line">                overflow = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                    Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                    <span class="keyword">if</span> (seg != <span class="literal">null</span>) &#123;</span><br><span class="line">                        sum += seg.modCount;</span><br><span class="line">                        int c = seg.count;</span><br><span class="line">                        <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                            overflow = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sum == last)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                last = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    segmentAt(segments, j).unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中重复进行了lock和unlock，因为在想要得到map的size的时候是不能够再进行修改的，所以加上锁，这里可能会有性能问题，可是size操作用的并不是很频繁，所以可以忽略。</p><p>rehash操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在put操作中</span></span><br><span class="line"><span class="comment">//如果大于了hash的阈值，就会进行rehash</span></span><br><span class="line"><span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                            rehash(node);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Doubles size of table and repacks entries, also adding the</span></span><br><span class="line"><span class="comment">         * given node to new table</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"> private <span class="keyword">void</span> rehash(HashEntry&lt;K,V&gt; node) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">            int oldCapacity = oldTable.length;</span><br><span class="line">            int newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            threshold = (int)(newCapacity * loadFactor);</span><br><span class="line">            HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">                (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">            int sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">                HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                    HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">                    int idx = e.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (next == <span class="literal">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                        newTable[idx] = e;</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                        HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                        int lastIdx = idx;</span><br><span class="line">                        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                             last != <span class="literal">null</span>;</span><br><span class="line">                             last = last.next) &#123;</span><br><span class="line">                            int k = last.hash &amp; sizeMask;</span><br><span class="line">                            <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                                lastIdx = k;</span><br><span class="line">                                lastRun = last;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        newTable[lastIdx] = lastRun;</span><br><span class="line">                        <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            V v = p.value;</span><br><span class="line">                            int h = p.hash;</span><br><span class="line">                            int k = h &amp; sizeMask;</span><br><span class="line">                            HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                            newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">            node.setNext(newTable[nodeIndex]);</span><br><span class="line">            newTable[nodeIndex] = node;</span><br><span class="line">            table = newTable;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>rehash会将空间容量翻倍，将node放进去，是一个比较耗时的操作，做了一点油画，尽量重用现有的元素，不去新建元素，也就是说在翻倍前和翻倍后，同一个元素，很可能在用一个位置</p><h2 id="2-3-BlockingQueue"><a href="#2-3-BlockingQueue" class="headerlink" title="2.3. BlockingQueue"></a>2.3. BlockingQueue</h2><p>阻塞队列</p><p>阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。<br><img alt="" data-original="/images/15488919944790.png"></p><p>以上两段内容转自：<a href="http://ifeve.com/java-blocking-queue/" target="_blank" rel="noopener">http://ifeve.com/java-blocking-queue/</a><br><img alt="" data-original="/images/15488920002086.png"></p><p>是一个接口，不是一个实际的类，是一个并发容器，但不是一个高性能的并发容器，和concurrentHashMap（高性能）不一样，但它本身的好处是在多个线程共享数据的容器</p><p>如上图，如果队列为空，还试图往队列里面读数据，读的线程就会等待，等待有其他的线程往里面写数据的时候，才会唤醒，并且去拿到数据。如果队列已经满了，还想往队列中存数据，写的线程就会等待，等有人将数据拿掉之后才会写进去。</p><p>所以会引起线程的阻塞。</p><h3 id="ArrayBlockingQueue源码"><a href="#ArrayBlockingQueue源码" class="headerlink" title="ArrayBlockingQueue源码"></a>ArrayBlockingQueue源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Main lock guarding all access */</span></span><br><span class="line">    final ReentrantLock lock;<span class="comment">//保证线程安全</span></span><br><span class="line">    <span class="comment">/** Condition for waiting takes */</span></span><br><span class="line">    private final Condition notEmpty;<span class="comment">//提示读操作不为空</span></span><br><span class="line">    <span class="comment">/** Condition for waiting puts */</span></span><br><span class="line">    private final Condition notFull;<span class="comment">//提示写操作不为满</span></span><br><span class="line"></span><br><span class="line"> public <span class="keyword">void</span> put(E e) throws InterruptedException &#123;</span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        final ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        <span class="comment">//put操作直接加锁，所以是比较耗性能的。</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">            <span class="comment">//如果是满的会进行等待，直到下面的take操作</span></span><br><span class="line">                notFull.await();</span><br><span class="line">            insert(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public E take() throws InterruptedException &#123;</span><br><span class="line">        final ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//这里是为了读操作</span></span><br><span class="line">                notEmpty.await();</span><br><span class="line">                <span class="comment">//去掉写操作的锁，具体代码往下看</span></span><br><span class="line">            <span class="keyword">return</span> extract();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> private E extract() &#123;</span><br><span class="line">        final <span class="built_in">Object</span>[] items = <span class="keyword">this</span>.items;</span><br><span class="line">        E x = <span class="keyword">this</span>.&lt;E&gt;cast(items[takeIndex]);</span><br><span class="line">        items[takeIndex] = <span class="literal">null</span>;</span><br><span class="line">        takeIndex = inc(takeIndex);</span><br><span class="line">        --count;</span><br><span class="line">        <span class="comment">//在这里讲锁打开</span></span><br><span class="line">        notFull.signal();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-ConcurrentLinkedQueue"><a href="#2-4-ConcurrentLinkedQueue" class="headerlink" title="2.4. ConcurrentLinkedQueue"></a>2.4. ConcurrentLinkedQueue</h2><p>高性能的链表队列，处理类似于concurrentHashMap，内部使用大量的无锁的算法。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;1-各种同步控制工具的使用&quot;&gt;&lt;a href=&quot;#1-各种同步控制工具的使用&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java高并发程序设计学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高并发" scheme="http://mmmmmm.me/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计学习笔记（四）：无锁</title>
    <link href="http://mmmmmm.me/2019-01-31-2.html"/>
    <id>http://mmmmmm.me/2019-01-31-2.html</id>
    <published>2019-01-18T11:20:03.000Z</published>
    <updated>2019-01-30T23:37:42.131Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="1-无锁类的原理详解"><a href="#1-无锁类的原理详解" class="headerlink" title="1. 无锁类的原理详解"></a>1. 无锁类的原理详解</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>前面已经介绍过无锁：<br>– 无障碍<br>无障碍是一种最弱的非阻塞调度<br>自由出入临界区<br>无竞争时，有限步内完成操作<br>有竞争时，回滚数据有竞争时，回滚数据<br>好进不好出，很容易进去，但是进去发现很多线程竞争相同的资源的时候，会需要回滚数据，比如要读取xy，已经读过了x，读到y的时候发现在竞争，会从x重新读。</p><p>– 无锁<br>是无障碍的<br>保证有一个线程可以胜出<br>while (!atomicVar.compareAndSet(localVar, localVar+1)) {<br>localVar = atomicVar.get();<br>}<br>因为无障碍中，如果存在不断的竞争，将会所有的都出不来，所以无锁就需要每次竞争都能胜出一个，这样保证程序能够顺畅的执行下去。</p><h2 id="1-1-CAS"><a href="#1-1-CAS" class="headerlink" title="1.1. CAS"></a>1.1. CAS</h2><p>CAS算法的过程是这样:它包含3个参数CAS(V,E,N)。V表示要更新的变量，E表示预期值，N表示新值。仅当V 值等于E值时，才会将V的值设为N，如果V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么 都不做。最后，CAS返回当前V的真实值。CAS操作是抱着乐观的态度进行的，它总是认为自己可以成功完成 操作。当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败。失败的线程 不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，CAS 操作即时没有锁，也可以发现其他线程对当前线程的干扰，并进行恰当的处理。</p><p>CAS是一个原子操作，是由一条cpu指令完成的。</p><p>java中提供了很多无所类的使用，如果一个线程被挂起，将会消耗八万个时光周期，但是如果是无锁的，最多只是循环，也就只会消耗几个时光周期，所以无锁的方式比阻塞的方式要好很多。</p><h2 id="1-2-CPU指令"><a href="#1-2-CPU指令" class="headerlink" title="1.2. CPU指令"></a>1.2. CPU指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmpxchg</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">accumulator = AL, AX, or EAX, depending on whether</span></span><br><span class="line"><span class="comment">a byte, word, or doubleword comparison is being performed */</span></span><br><span class="line"><span class="keyword">if</span>(accumulator == Destination) &#123;</span><br><span class="line">ZF = <span class="number">1</span>;         <span class="comment">//判断是否和期望值相等，相等的话就给一个转换标志。同时进行转换。</span></span><br><span class="line">Destination = Source; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ZF = <span class="number">0</span>;         <span class="comment">//不相等的话就给一个不转换的标志。同时不转换。</span></span><br><span class="line">accumulator = Destination; &#125;</span><br></pre></td></tr></table></figure><p>这是一个原子操作是安全的。</p><h1 id="2-无锁类的使用"><a href="#2-无锁类的使用" class="headerlink" title="2. 无锁类的使用"></a>2. 无锁类的使用</h1><h2 id="2-1-AtomicInteger"><a href="#2-1-AtomicInteger" class="headerlink" title="2.1. AtomicInteger"></a>2.1. AtomicInteger</h2><h3 id="2-1-1-概述"><a href="#2-1-1-概述" class="headerlink" title="2.1.1. 概述"></a>2.1.1. 概述</h3><p>Number</p><h3 id="2-1-2-主要接口"><a href="#2-1-2-主要接口" class="headerlink" title="2.1.2. 主要接口"></a>2.1.2. 主要接口</h3><p>public final int get()//取得当前值<br>public final void set(int newValue)//设置当前值<br>public final int getAndSet(int newValue)//设置新值，并返回旧值<br>public final boolean compareAndSet(int expect, int u)//如果当前值为expect，则设置为u<br>public final int getAndIncrement() //当前值加1，返回旧值<br>public final int getAndDecrement()//当前值减1，返回旧值<br>public final int getAndAdd(int delta)//当前值增加delta，返回旧值<br>public final int incrementAndGet() //当前值加1，返回新值<br>public final int decrementAndGet() //当前值减1，返回新值<br>public final int addAndGet(int delta)//当前值增加delta，返回新值</p><h3 id="2-1-3-主要接口的实现"><a href="#2-1-3-主要接口的实现" class="headerlink" title="2.1.3. 主要接口的实现"></a>2.1.3. 主要接口的实现</h3><p>compareAndSet方法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//expect期望值，update更新的新值，成功返回true，失败返回false</span></span><br><span class="line">  public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//unsafe是不安全的，java将指针进行了屏蔽封装，而unsafe会提供类似指针的操作，对这个类的偏移量上的期望值</span></span><br></pre></td></tr></table></figure><p></p><p>偏移量valueOffset哪里来的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOffset = unsafe.objectFieldOffset</span><br></pre></td></tr></table></figure><p>getAndIncrement方法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回当前值，并且加一</span></span><br><span class="line">    public final int getAndIncrement() &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        int current = get();</span><br><span class="line">        int next = current + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(compareAndSet(current,next))</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>get是得到当前这个类的private volatile int value;这个值加一，然后compareAndSet，如果当前的值和期望值相等的时候返回当前的这个值，否则，继续循环，和无锁的机制是一样的。如果在判断之前有其他的线程拿到了current值，在下面的if将会失败</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> AtomicInteger i = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="title">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">i.incrementAndGet();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Thread[] ts = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">ts[k] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AddThread());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">ts[k].start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">ts[k].join();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Unsafe"><a href="#2-2-Unsafe" class="headerlink" title="2.2. Unsafe"></a>2.2. Unsafe</h2><h3 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1. 概述"></a>2.2.1. 概述</h3><p>非安全的操作，比如: 根据偏移量设置值 、park() 、底层的CAS操作<br>非公开API，在不同版本的JDK中， 可能有较大差异</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>拿到value这个字段在本类（相当于c中的首地址）中的偏移量是多少。</p><h3 id="2-2-2-主要接口"><a href="#2-2-2-主要接口" class="headerlink" title="2.2.2. 主要接口"></a>2.2.2. 主要接口</h3><p>//获得给定对象偏移量上的int值<br>public native int getInt(Object o, long offset); //设置给定对象偏移量上的int值<br>public native void putInt(Object o, long offset, int x); //获得字段在对象中的偏移量<br>public native long objectFieldOffset(Field f); //设置给定对象的int值，使用volatile语义<br>public native void putIntVolatile(Object o, long offset, int x); //获得给定对象对象的int值，使用volatile语义<br>public native int getIntVolatile(Object o, long offset); //和putIntVolatile()一样，但是它要求被操作字段就是volatile类型的 public native void putOrderedInt(Object o, long offset, int x);</p><h2 id="2-3-AtomicReference"><a href="#2-3-AtomicReference" class="headerlink" title="2.3. AtomicReference"></a>2.3. AtomicReference</h2><h3 id="2-3-1-概述"><a href="#2-3-1-概述" class="headerlink" title="2.3.1. 概述"></a>2.3.1. 概述</h3><p>对象的引用<br>对引用进行修改 是一个模板类，抽象化了数据类型</p><h3 id="2-3-2-主要接口"><a href="#2-3-2-主要接口" class="headerlink" title="2.3.2. 主要接口"></a>2.3.2. 主要接口</h3><p>get()<br>set(V) compareAndSet() getAndSet(V)<br>大部分的方法和compareAndSet差不多。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">public final <span class="keyword">static</span> AtomicReference&lt;<span class="built_in">String</span>&gt; atomicStr = <span class="keyword">new</span> AtomicReference&lt;<span class="built_in">String</span>&gt;(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">final int num = i;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="built_in">Math</span>.abs((int)<span class="built_in">Math</span>.random()*<span class="number">100</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (atomicStr.compareAndSet((<span class="string">"abc"</span>), <span class="string">"def"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"Thread"</span>+Thread.currentThread().getId()+<span class="string">"change value to"</span>+atomicStr.compareAndSet((<span class="string">"abc"</span>), <span class="string">"def"</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Thread"</span>+Thread.currentThread().getId()+<span class="string">"FALED"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread10change value tofalse</span><br><span class="line">Thread1FALED</span><br><span class="line">Thread2FALED</span><br><span class="line">Thread3FALED</span><br><span class="line">Thread4FALED</span><br><span class="line">Thread5FALED</span><br><span class="line">Thread6FALED</span><br><span class="line">Thread7FALED</span><br><span class="line">Thread8FALED</span><br><span class="line">Thread9FALED</span><br></pre></td></tr></table></figure><h2 id="2-4-AtomicStampedReference"><a href="#2-4-AtomicStampedReference" class="headerlink" title="2.4. AtomicStampedReference"></a>2.4. AtomicStampedReference</h2><p>和对象的引用差不多<br>stamped表示时间戳、唯一性等</p><h3 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1. 概述"></a>2.4.1. 概述</h3><p>ABA问题</p><p><img alt="" data-original="/images/15488913529012.png"></p><p>如图，一个值为A，期初一个线程1拿到它，然后做相关的操作，这个时候线程2拿到这个A并且改为了B，线程3拿到了B改为了A，这个时候线程1将拿到的A和讲过了线程2 线程3后的A进行比较，相同的话A就改为C。<br>发现是没问题的，因为A还是变为了A，如果是加法，没问题，可是如果比较关注中间的过程呢？比如网吧充钱，没钱机器就自动冲，可是只能自动充值一次，这个时候第二次还是到了临界点呢？？<br>这个时候就需要给一个时间戳或者唯一的标识。每次改变的时候都传递一个包含A和时间戳的对象，每次在比价A的同时比较时间戳。<br>源码解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将原来的value做了一层封装分为了reference和stamp</span></span><br><span class="line">private <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        final T reference;</span><br><span class="line">        final int stamp;</span><br><span class="line">        private Pair(T reference, int stamp) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reference = reference;</span><br><span class="line">            <span class="keyword">this</span>.stamp = stamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &lt;T&gt; Pair&lt;T&gt; <span class="keyword">of</span>(T reference, int stamp) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//compareAndSet的参数也由原来的两个，变为了四个，包括期望值和新的值</span></span><br><span class="line">public boolean compareAndSet(V   expectedReference,</span><br><span class="line">                                 V   newReference,</span><br><span class="line">                                 int expectedStamp,</span><br><span class="line">                                 int newStamp) &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        <span class="comment">//当两个都相等的时候才有机会向下执行</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">            ((newReference == current.reference &amp;&amp;</span><br><span class="line">              newStamp == current.stamp) ||</span><br><span class="line">             casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jdk中经常会有函数叫做cas...来更新列表的头部、尾部等操作</span></span><br><span class="line"><span class="comment">//pairOffset就是</span></span><br><span class="line">private boolean casPair(Pair&lt;V&gt; cmp, Pair&lt;V&gt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, pairOffset, cmp, val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-AtomicIntegerArray"><a href="#2-5-AtomicIntegerArray" class="headerlink" title="2.5. AtomicIntegerArray"></a>2.5. AtomicIntegerArray</h2><h3 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1. 概述"></a>2.5.1. 概述</h3><p>支持无锁的数组</p><h3 id="2-5-2-主要接口"><a href="#2-5-2-主要接口" class="headerlink" title="2.5.2. 主要接口"></a>2.5.2. 主要接口</h3><p>//获得数组第i个下标的元素<br>public final int get(int i)<br>//获得数组的长度<br>public final int length()<br>//将数组第i个下标设置为newValue，并返回旧的值<br>public final int getAndSet(int i, int newValue) //进行CAS操作，如果第i个下标的元素等于expect，则设置为update，设置成功返回true public final boolean compareAndSet(int i, int expect, int update)<br>//将第i个下标的元素加1<br>public final int getAndIncrement(int i) //将第i个下标的元素减1<br>public final int getAndDecrement(int i) //将第i个下标的元素增加delta(delta可以是负数) public final int getAndAdd(int i, int delta)</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicIntegerArray;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> AtomicIntegerArray arr = <span class="keyword">new</span> AtomicIntegerArray(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">arr.getAndIncrement(i % arr.length());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Thread[] ts = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">ts[i] = <span class="keyword">new</span> Thread((<span class="keyword">new</span> AddThread()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">ts[i].start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">ts[i].join();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是不安全的话，不会每个都是1000，应该比这个小。<br>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>,<span class="number">10000</span>]</span><br></pre></td></tr></table></figure><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">static</span> final int base = unsafe.arrayBaseOffset(int[].class);</span><br><span class="line"></span><br><span class="line">public final int get(int i) &#123;</span><br><span class="line">        <span class="keyword">return</span> getRaw(checkedByteOffset(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private int getRaw(long offset) &#123;</span><br><span class="line"><span class="comment">//数组所在的基地址开始取offset的偏移量</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.getIntVolatile(array, offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回第i个元素在数组中的偏移量是多少</span></span><br><span class="line">private long checkedByteOffset(int i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= array.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index "</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteOffset(i);</span><br><span class="line">&#125;</span><br><span class="line">private <span class="keyword">static</span> long byteOffset(int i) &#123;</span><br><span class="line"><span class="comment">//i偏移了shift的数值</span></span><br><span class="line">        <span class="keyword">return</span> ((long) i &lt;&lt; shift) + base;</span><br><span class="line">        <span class="comment">//通过下面的计算 i左移两位（二进制，即在末尾加两个零</span></span><br><span class="line">        <span class="comment">//，如果是十进制就是乘以4）</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//数组中每个元素有多宽，int就是4（每个int是4个byte）</span></span><br><span class="line">        int scale = unsafe.arrayIndexScale(int[].class);</span><br><span class="line">        <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"data type scale not a power of two"</span>);</span><br><span class="line">            <span class="comment">//shift的值</span></span><br><span class="line">            <span class="comment">//numberOfLeadingZeros前导零，一个数字化成二进制</span></span><br><span class="line">            <span class="comment">//前面的零的个数</span></span><br><span class="line">            <span class="comment">//4------&gt;   00000....100       32-3=29</span></span><br><span class="line">            <span class="comment">//4的前导零就是29</span></span><br><span class="line">        shift = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        <span class="comment">//所以shift=2</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-AtomicIntegerFieldUpdater"><a href="#2-6-AtomicIntegerFieldUpdater" class="headerlink" title="2.6. AtomicIntegerFieldUpdater"></a>2.6. AtomicIntegerFieldUpdater</h2><h3 id="2-6-1-概述"><a href="#2-6-1-概述" class="headerlink" title="2.6.1. 概述"></a>2.6.1. 概述</h3><p>让普通变量也享受原子操作<br>希望拥有原子操作，但是不改变原原子的类型。<br>使用尽量少的代码、在不改变原来类型的基础上、做出较少的改变来实现原子操作。</p><h3 id="2-6-2-主要接口-AtomicIntegerFieldUpdater-newUpdater"><a href="#2-6-2-主要接口-AtomicIntegerFieldUpdater-newUpdater" class="headerlink" title="2.6.2. 主要接口 AtomicIntegerFieldUpdater.newUpdater()"></a>2.6.2. 主要接口 AtomicIntegerFieldUpdater.newUpdater()</h3><p>AtomicIntegerFieldUpdate.newUpdate()<br>incrementAndGet()</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicIntegerArray;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicIntegerFieldUpdater;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Candidate</span></span>&#123;</span><br><span class="line">int id;</span><br><span class="line">volatile  int score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final <span class="keyword">static</span> AtomicIntegerFieldUpdater&lt;Candidate&gt; scoreUpdater =</span><br><span class="line">AtomicIntegerFieldUpdater.newUpdater(Candidate.class, <span class="string">"score"</span>);</span><br><span class="line">public <span class="keyword">static</span> AtomicInteger allScore = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">final Candidate stu  = <span class="keyword">new</span> Candidate();</span><br><span class="line">Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;<span class="number">10000</span> ; i++) &#123;</span><br><span class="line">threads[i] = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Math</span>.random()&gt;<span class="number">0.4</span>)&#123;</span><br><span class="line">scoreUpdater.incrementAndGet(stu);</span><br><span class="line">allScore.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">threads[i].start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;<span class="number">10000</span> ; i++) &#123;</span><br><span class="line">threads[i].join();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sore="</span>+stu.score);</span><br><span class="line">System.out.println(<span class="string">"allScore="</span>+allScore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过AtomicInteger来验证，发现是相同的安全的结果，主要就是上面提到的两个方法，通过反射实现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sore=<span class="number">5948</span></span><br><span class="line">allScore=<span class="number">5948</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-小说明"><a href="#2-6-3-小说明" class="headerlink" title="2.6.3. 小说明"></a>2.6.3. 小说明</h3><ol><li>Updater只能修改它可见范围内的变量。因为Updater使用反射得到这个变量。如果变量不可见，就会出错。<br>比如如果score申明为private，就是不可行的。</li><li>为了确保变量被正确的读取，它必须是volatile类型的。如果我们原有代码中未申明这个类型，那么简单得 申明一下就行，这不会引起什么问题。</li><li>由于CAS操作会通过对象实例中的偏移量直接进行赋值，因此，它不支持static字段(Unsafe. objectFieldOffset()不支持静态变量)。<h1 id="3-无锁算法详解"><a href="#3-无锁算法详解" class="headerlink" title="3. 无锁算法详解"></a>3. 无锁算法详解</h1></li></ol><p>jdk中的vector是有锁的。<br>源码解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this Vector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param e element to be appended to this Vector</span></span><br><span class="line"><span class="comment">     * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     * @since 1.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public synchronized boolean add(E e) &#123;</span><br><span class="line">    <span class="comment">//记录vector被修改的次数</span></span><br><span class="line">        modCount++;</span><br><span class="line">       <span class="comment">// vector底层是数组</span></span><br><span class="line">       <span class="comment">// 判断时候越界，如果越界了就进行扩展，扩展代码在下面</span></span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//不越界就将e加在后面</span></span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 是一个同步的方法，每次只有一个线程能进行add操作，所有的元素都保存在elementData</span></span><br><span class="line">    中</span><br><span class="line">    private <span class="keyword">void</span> ensureCapacityHelper(int minCapacity) &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">private <span class="keyword">void</span> grow(int minCapacity) &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//扩展增量（扩容）capacityIncrement可以自己制定，如果自己不指定的话就</span></span><br><span class="line">        <span class="comment">//是默认的oldCapacity+oldCapacity------&gt;newCapacity也就是</span></span><br><span class="line">        <span class="comment">//乘以二</span></span><br><span class="line">        int newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">            <span class="comment">//把老元素放到新的元素中去</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建了一个新的数组，把原来的数组复制过去。</span></span><br><span class="line"> public <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">        T[] copy = ((<span class="built_in">Object</span>)newType == (<span class="built_in">Object</span>)<span class="built_in">Object</span>[].class)</span><br><span class="line">            ? (T[]) <span class="keyword">new</span> <span class="built_in">Object</span>[newLength]</span><br><span class="line">            : (T[]) <span class="built_in">Array</span>.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         <span class="built_in">Math</span>.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意看里面的注释很重要：<br>提取出来几个<br><strong><font color="red">vector底层是数组<br>判断时候越界，如果越界了就进行扩展，<br>add是一个同步的方法（有锁的），每次只有一个线程能进行add操作<br>扩展增量（扩容）capacityIncrement可以自己制定，如果自己不指定的话就<br>是默认的oldCapacity+oldCapacity——&gt;newCapacity也就是<br>乘以二（有次面试我被问过）!!!!!!!!!!!!所以当扩容的数字很大的时候，建议给个扩容的大小<br>把老元素放到新的元素中去<br>创建了一个新的数组，把原来的数组复制过去。</font></strong></p><h2 id="3-1-无锁的Vector实现"><a href="#3-1-无锁的Vector实现" class="headerlink" title="3.1. 无锁的Vector实现"></a>3.1. 无锁的Vector实现</h2><p>这里只将源码贴出来<br>和普通的vector实现的区别是原来的vector是一维数组，而这里的数组是二维的数组，为什么用二维数组？二维数组中的第一个容量是n，第二个就是2n，第三个就是4n。。。。以此类推，就像是一个个不同容量的篮子。<br>FIRST_BUCKET_SIZE给定第一个篮子的大小<br>N_BUCKET有多少个篮子<br>private final AtomicReferenceArray&lt;AtomicReferenceArray<e>&gt; buckets;<br>通过AtomicReferenceArray的二重数组来封装这些篮子。AtomicReferenceArray和AtomicArray差不多只是将array的值换成了对象。</e></p><p><strong><font color="red">有个分析的很不错的博文：</font></strong><br><a href="http://reimuwang.org/2018/05/17/Java%20%E5%B9%B6%E5%8F%91-%E6%97%A0%E9%94%81%E7%9A%84Vector%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">http://reimuwang.org/2018/05/17/Java%20%E5%B9%B6%E5%8F%91-%E6%97%A0%E9%94%81%E7%9A%84Vector%E5%AE%9E%E7%8E%B0/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2007 IBM Corporation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line">package main.java.org.amino.ds.lockfree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.AbstractList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReferenceArray;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * It is a thread safe and lock-free vector.</span></span><br><span class="line"><span class="comment"> * This class implement algorithm from:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Lock-free Dynamically Resizable Arrays &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Damian Dechev, Peter Pirkelbauer, and Bjarne Stroustrup&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Texas A&amp;M University College Station, TX 77843-3112&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &#123;dechev, peter.pirkelbauer&#125;@tamu.edu, bs@cs.tamu.edu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Zhi Gan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &lt;E&gt; type of element in the vector</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LockFreeVector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> final boolean debug = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Size of the first bucket. sizeof(bucket[i+1])=2*sizeof(bucket[i])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private <span class="keyword">static</span> final int FIRST_BUCKET_SIZE = <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * number of buckets. 30 will allow 8*(2^30-1) elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private <span class="keyword">static</span> final int N_BUCKET = <span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * We will have at most N_BUCKET number of buckets. And we have</span></span><br><span class="line"><span class="comment">     * sizeof(buckets.get(i))=FIRST_BUCKET_SIZE**(i+1)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private final AtomicReferenceArray&lt;AtomicReferenceArray&lt;E&gt;&gt; buckets;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @author ganzhi</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteDescriptor</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        public E oldV;</span><br><span class="line">        public E newV;</span><br><span class="line">        public AtomicReferenceArray&lt;E&gt; addr;</span><br><span class="line">        public int addr_ind;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creating a new descriptor.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param addr Operation address</span></span><br><span class="line"><span class="comment">         * @param addr_ind  Index of address</span></span><br><span class="line"><span class="comment">         * @param oldV old operand</span></span><br><span class="line"><span class="comment">         * @param newV new operand</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        public WriteDescriptor(AtomicReferenceArray&lt;E&gt; addr, int addr_ind,</span><br><span class="line">                E oldV, E newV) &#123;</span><br><span class="line">            <span class="keyword">this</span>.addr = addr;</span><br><span class="line">            <span class="keyword">this</span>.addr_ind = addr_ind;</span><br><span class="line">            <span class="keyword">this</span>.oldV = oldV;</span><br><span class="line">            <span class="keyword">this</span>.newV = newV;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * set newV.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        public <span class="keyword">void</span> doIt() &#123;</span><br><span class="line">            addr.compareAndSet(addr_ind, oldV, newV);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @author ganzhi</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        public int size;</span><br><span class="line">        volatile WriteDescriptor&lt;E&gt; writeop;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create a new descriptor.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param size Size of the vector</span></span><br><span class="line"><span class="comment">         * @param writeop Executor write operation</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        public Descriptor(int size, WriteDescriptor&lt;E&gt; writeop) &#123;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.writeop = writeop;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        public <span class="keyword">void</span> completeWrite() &#123;</span><br><span class="line">            WriteDescriptor&lt;E&gt; tmpOp = writeop;</span><br><span class="line">            <span class="keyword">if</span> (tmpOp != <span class="literal">null</span>) &#123;</span><br><span class="line">                tmpOp.doIt();</span><br><span class="line">                writeop = <span class="literal">null</span>; <span class="comment">// this is safe since all write to writeop use</span></span><br><span class="line">                <span class="comment">// null as r_value.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private AtomicReference&lt;Descriptor&lt;E&gt;&gt; descriptor;</span><br><span class="line">    private <span class="keyword">static</span> final int zeroNumFirst = Integer</span><br><span class="line">            .numberOfLeadingZeros(FIRST_BUCKET_SIZE);;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public LockFreeVector() &#123;</span><br><span class="line">        buckets = <span class="keyword">new</span> AtomicReferenceArray&lt;AtomicReferenceArray&lt;E&gt;&gt;(N_BUCKET);</span><br><span class="line">        buckets.set(<span class="number">0</span>, <span class="keyword">new</span> AtomicReferenceArray&lt;E&gt;(FIRST_BUCKET_SIZE));</span><br><span class="line">        descriptor = <span class="keyword">new</span> AtomicReference&lt;Descriptor&lt;E&gt;&gt;(<span class="keyword">new</span> Descriptor&lt;E&gt;(<span class="number">0</span>,</span><br><span class="line">                <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add e at the end of vector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param e</span></span><br><span class="line"><span class="comment">     *            element added</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">void</span> push_back(E e) &#123;</span><br><span class="line">        Descriptor&lt;E&gt; desc;</span><br><span class="line">        Descriptor&lt;E&gt; newd;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            desc = descriptor.get();</span><br><span class="line">            desc.completeWrite();</span><br><span class="line">            <span class="comment">//desc.size   Vector 本身的大小</span></span><br><span class="line">            <span class="comment">//FIRST_BUCKET_SIZE  第一个一位数组的大小</span></span><br><span class="line">            int pos = desc.size + FIRST_BUCKET_SIZE;</span><br><span class="line">            int zeroNumPos = Integer.numberOfLeadingZeros(pos);  <span class="comment">// 取出pos 的前导领</span></span><br><span class="line">            <span class="comment">//zeroNumFirst  为FIRST_BUCKET_SIZE 的前导领</span></span><br><span class="line">            int bucketInd = zeroNumFirst - zeroNumPos;  <span class="comment">//哪个一位数组</span></span><br><span class="line">            <span class="comment">//判断这个一维数组是否已经启用</span></span><br><span class="line">            <span class="keyword">if</span> (buckets.get(bucketInd) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//newLen  一维数组的长度</span></span><br><span class="line">                int newLen = <span class="number">2</span> * buckets.get(bucketInd - <span class="number">1</span>).length();</span><br><span class="line">                <span class="keyword">if</span> (debug)</span><br><span class="line">                    System.out.println(<span class="string">"New Length is:"</span> + newLen);</span><br><span class="line">                buckets.compareAndSet(bucketInd, <span class="literal">null</span>,</span><br><span class="line">                        <span class="keyword">new</span> AtomicReferenceArray&lt;E&gt;(newLen));</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            int idx = (<span class="number">0x80000000</span>&gt;&gt;&gt;zeroNumPos) ^ pos;   <span class="comment">//在这个一位数组中，我在哪个位置</span></span><br><span class="line">            newd = <span class="keyword">new</span> Descriptor&lt;E&gt;(desc.size + <span class="number">1</span>, <span class="keyword">new</span> WriteDescriptor&lt;E&gt;(</span><br><span class="line">                    buckets.get(bucketInd), idx, <span class="literal">null</span>, e));</span><br><span class="line">        &#125; <span class="keyword">while</span> (!descriptor.compareAndSet(desc, newd));</span><br><span class="line">        descriptor.get().completeWrite();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove the last element in the vector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return element removed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public E pop_back() &#123;</span><br><span class="line">        Descriptor&lt;E&gt; desc;</span><br><span class="line">        Descriptor&lt;E&gt; newd;</span><br><span class="line">        E elem;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            desc = descriptor.get();</span><br><span class="line">            desc.completeWrite();</span><br><span class="line"> </span><br><span class="line">            int pos = desc.size + FIRST_BUCKET_SIZE - <span class="number">1</span>;</span><br><span class="line">            int bucketInd = Integer.numberOfLeadingZeros(FIRST_BUCKET_SIZE)</span><br><span class="line">                    - Integer.numberOfLeadingZeros(pos);</span><br><span class="line">            int idx = Integer.highestOneBit(pos) ^ pos;</span><br><span class="line">            elem = buckets.get(bucketInd).get(idx);</span><br><span class="line">            newd = <span class="keyword">new</span> Descriptor&lt;E&gt;(desc.size - <span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!descriptor.compareAndSet(desc, newd));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> elem;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get element with the index.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param index</span></span><br><span class="line"><span class="comment">     *            index</span></span><br><span class="line"><span class="comment">     * @return element with the index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        int pos = index + FIRST_BUCKET_SIZE;</span><br><span class="line">        int zeroNumPos = Integer.numberOfLeadingZeros(pos);</span><br><span class="line">        int bucketInd = zeroNumFirst - zeroNumPos;</span><br><span class="line">        int idx = (<span class="number">0x80000000</span>&gt;&gt;&gt;zeroNumPos) ^ pos;</span><br><span class="line">        <span class="keyword">return</span> buckets.get(bucketInd).get(idx);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the element with index to e.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param index</span></span><br><span class="line"><span class="comment">     *            index of element to be reset</span></span><br><span class="line"><span class="comment">     * @param e</span></span><br><span class="line"><span class="comment">     *            element to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    public E set(int index, E e) &#123;</span><br><span class="line">        int pos = index + FIRST_BUCKET_SIZE;</span><br><span class="line">        int bucketInd = Integer.numberOfLeadingZeros(FIRST_BUCKET_SIZE)</span><br><span class="line">                - Integer.numberOfLeadingZeros(pos);</span><br><span class="line">        int idx = Integer.highestOneBit(pos) ^ pos;</span><br><span class="line">        AtomicReferenceArray&lt;E&gt; bucket = buckets.get(bucketInd);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            E oldV = bucket.get(idx);</span><br><span class="line">            <span class="keyword">if</span> (bucket.compareAndSet(idx, oldV, e))</span><br><span class="line">                <span class="keyword">return</span> oldV;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reserve more space.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param newSize</span></span><br><span class="line"><span class="comment">     *            new size be reserved</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">void</span> reserve(int newSize) &#123;</span><br><span class="line">        int size = descriptor.get().size;</span><br><span class="line">        int pos = size + FIRST_BUCKET_SIZE - <span class="number">1</span>;</span><br><span class="line">        int i = Integer.numberOfLeadingZeros(FIRST_BUCKET_SIZE)</span><br><span class="line">                - Integer.numberOfLeadingZeros(pos);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        int initialSize = buckets.get(i - <span class="number">1</span>).length();</span><br><span class="line">        <span class="keyword">while</span> (i &lt; Integer.numberOfLeadingZeros(FIRST_BUCKET_SIZE)</span><br><span class="line">                - Integer.numberOfLeadingZeros(newSize + FIRST_BUCKET_SIZE - <span class="number">1</span>)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            initialSize *= FIRST_BUCKET_SIZE;</span><br><span class="line">            buckets.compareAndSet(i, <span class="literal">null</span>, <span class="keyword">new</span> AtomicReferenceArray&lt;E&gt;(</span><br><span class="line">                    initialSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size of vector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return size of vector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        <span class="keyword">return</span> descriptor.get().size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    @Override</span><br><span class="line">    public boolean add(E object) &#123;</span><br><span class="line">        push_back(object);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;1-无锁类的原理详解&quot;&gt;&lt;a href=&quot;#1-无锁类的原理详解&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java高并发程序设计学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高并发" scheme="http://mmmmmm.me/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计学习笔记（三）：Java内存模型和线程安全</title>
    <link href="http://mmmmmm.me/2019-01-31-1.html"/>
    <id>http://mmmmmm.me/2019-01-31-1.html</id>
    <published>2019-01-18T11:20:02.000Z</published>
    <updated>2019-01-31T05:48:53.467Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>原子性是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就 不会被其它线程干扰。<br>i++是原子操作吗?<br>不是，因为包含了三次操作：读i，i+1，新值写到i中。<br>比如i=1，i是static的，一个线程a读到了1，另一个线程b在线程一做加法之前也读到了i=1, a线程和b线程同时拿到了i，做i++的操作，a线程i++后变成了2，b线程i++后也变成了2， <strong><font color="red">所以最后的i的值是2，但是实际上i的值应该是3</font></strong></p><h1 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h1><p>在并发时，程序的执行可能就会出现乱序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderExample</span> </span>&#123; int a = <span class="number">0</span>;</span><br><span class="line">boolean flag = <span class="literal">false</span>; public <span class="keyword">void</span> writer() &#123;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">flag = <span class="literal">true</span>; &#125;</span><br><span class="line">public <span class="keyword">void</span> reader() &#123; <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">inti= a+<span class="number">1</span>;</span><br><span class="line">...... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="" data-original="/images/15488909175833.png"></p><p>一条指令（汇编指令）的执行是可以分为很多步骤的<br>– 取指IF （把指令取出来）<br>– 译码和取寄存器操作数 ID （参数取出来）<br>– 执行或者有效地址计算 EX （执行）<br>– 存储器访问 MEM （存储器访问）<br>– 写回WB （数据写会到寄存器中去）<br><strong><font color="red">注意：每一个部分会占用计算机不同的硬件</font></strong><br><img alt="" data-original="/images/15488909301951.png"></p><p>复杂一点的：<br><img alt="" data-original="/images/15488909358761.png"></p><p>发现加了很多的气泡进去<br><img alt="" data-original="/images/15488909482711.png"><br><img alt="" data-original="/images/15488909498914.png"></p><h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><p>可见性是指当一个线程修改了某一个共享变量的值，其他线程是否能够立即知道这个修改。</p><h2 id="–-编译器优化"><a href="#–-编译器优化" class="headerlink" title="– 编译器优化"></a>– 编译器优化</h2><p>比如上面的重排，并不知道另一个线程中的值是多少，或者编译期，一个线程中，一个值优化到了某个寄存器中，另一个线程中将这个值放到了高速缓存cache中，这两个线程就不能再同一时间知道对方修改了值。多核cpu，每一个cpu中都有自己的寄存器，变量被不同的cpu不同的寄存器不同的cache中保存，所以不能保证可见。</p><h2 id="–-硬件优化-如写吸收，批操作"><a href="#–-硬件优化-如写吸收，批操作" class="headerlink" title="– 硬件优化(如写吸收，批操作)"></a>– 硬件优化(如写吸收，批操作)</h2><p>cpu想把数据写到内存里的时候，很可能不会是直接把数据写到内存里面，因为这样很慢，先把数据写到硬件队列里面，然后通过批量操作的方式批量写到内存里面去，这样会比较快一些，还会做优化，比如对同一个内存地址多次做了不同的读写，认为是没有必要，因为是以最后一个为准，所以干脆就把老的读写，就不读写进去，只将最后的地址读写进去<br><img alt="" data-original="/images/15488909591307.png"></p><p><strong><font color="red">如果不做优化，就不会有这些问题，可是不做优化的话，性能就会很差。</font></strong></p><h2 id="Java虚拟机层面的可见性"><a href="#Java虚拟机层面的可见性" class="headerlink" title="Java虚拟机层面的可见性"></a>Java虚拟机层面的可见性</h2><p>博文：<a href="http://hushi55.github.io/2015/01/05/volatile-assembly" target="_blank" rel="noopener">http://hushi55.github.io/2015/01/05/volatile-assembly</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">VisibilityTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; private boolean stop;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line">int i = <span class="number">0</span>; <span class="keyword">while</span>(!stop) &#123;</span><br><span class="line">i++; &#125;</span><br><span class="line">System.out.println(<span class="string">"finish loop,i="</span> + i); &#125;</span><br><span class="line">public <span class="keyword">void</span> stopIt() &#123; stop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">public boolean getStop()&#123; <span class="keyword">return</span> stop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws Exception &#123; VisibilityTest v = <span class="keyword">new</span> VisibilityTest();</span><br><span class="line">v.start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">v.stopIt();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>); System.out.println(<span class="string">"finish main"</span>); System.out.println(v.getStop());</span><br><span class="line">DATAGURU专业数据分析社区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">就是希望在v.stopIt();之后让stop=true，输出System.out.println(“finish loop,i=” + i); }<br>可是实际的操作，是并没有输出这句话的。<br></font></strong></p><p><img alt="" data-original="/images/15488909684910.png"></p><p>如何查看是什么模式？<br><img alt="" data-original="/images/15488909800340.png"></p><p>虚拟机执行有两种方式client方式和server模式，client不会做太多的优化，就是系统启动的比较快，server模式系统启动的慢，但是有很多的优化，现在64位的机器都是server模式。<br>通过server模式发现是永远不会执行完。<br><strong><font color="red">如何进行查看汇编指令 ？</font></strong><br>1、可以使用命令</p><blockquote><p>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly Main<br>(Main是class文件)</p></blockquote><p>2、在IDEA配置VM options，打印汇编指令，如下图。</p><blockquote><p>-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly</p></blockquote><p>原文：<a href="https://blog.csdn.net/ljheee/article/details/82218156" target="_blank" rel="noopener">https://blog.csdn.net/ljheee/article/details/82218156</a></p><p>上图是博客作者整理的汇编代码，这里解释一下：<br><strong><font color="red">因为jvm的内部优化，导致不断的在红色的代码部分进行循环，并没有走!stop的这个而判断指令，这个判断只是在刚刚进来的时候回进行了一次判断，所以会不断的执行下去。也就出现了上面的结果。</font></strong></p><p>引用博文中的一句话：<br>程序比较简单，在主线程中启动一个线程，这个线程不停的对局部变量做自增操作，主线程休眠 1 秒中后改变启动线程的循环控制变量，想让它停止循环。这个程序在 client 模式下是能停止线程做自增操作的，但是在 server 模式先将是无限循环。若是改成<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private volatile boolean stop;</span><br></pre></td></tr></table></figure><p></p><p><strong><font color="red">用 volatile 修饰 stop 变量，将不会出现死循环。</font></strong><br>我们知道 volatile 在 JVM 内存模型中是保证修饰变量的可见性，这个不是我们今天讨论的重点，我们今天想看看在 volatile 修饰下和不修饰代码编译成的汇编代码的区别，以便我们学习 JVM 的内存模型。</p><p>再来看一个例子</p><p><img alt="" data-original="/images/15488909905972.png"><br><img alt="" data-original="/images/15488909965152.png"></p><p>上图是从java语言规范中拿到的，描述可见性和指令重排的一些问题</p><h1 id="Happen-Before规则（先行发生）"><a href="#Happen-Before规则（先行发生）" class="headerlink" title="Happen-Before规则（先行发生）"></a>Happen-Before规则（先行发生）</h1><h2 id="程序顺序原则"><a href="#程序顺序原则" class="headerlink" title="程序顺序原则:"></a>程序顺序原则:</h2><p>一个线程内保证语义的串行性<br>对于单线程来说，重排前和重排后的结果必须一致<br><img alt="" data-original="/images/15488910504012.png"></p><h2 id="volatile规则"><a href="#volatile规则" class="headerlink" title="volatile规则:"></a>volatile规则:</h2><p>volatile变量的写，先发生于读，这保证了volatile变量的可见性</p><h2 id="锁规则"><a href="#锁规则" class="headerlink" title="锁规则:"></a>锁规则:</h2><p>解锁(unlock)必然发生在随后的加锁(lock)前<br>如果加锁被重排到解锁前面，因为还没有解锁，肯定是获取不到锁的</p><h2 id="传递性"><a href="#传递性" class="headerlink" title="传递性:"></a>传递性:</h2><p>A先于B，B先于C，那么A必然先于C</p><h3 id="线程的start-方法先于它的每一个动作"><a href="#线程的start-方法先于它的每一个动作" class="headerlink" title="线程的start()方法先于它的每一个动作"></a>线程的start()方法先于它的每一个动作</h3><h3 id="线程的所有操作先于线程的终结-Thread-join"><a href="#线程的所有操作先于线程的终结-Thread-join" class="headerlink" title="线程的所有操作先于线程的终结(Thread.join())"></a>线程的所有操作先于线程的终结(Thread.join())</h3><h3 id="线程的中断-interrupt-先于被中断线程的代码"><a href="#线程的中断-interrupt-先于被中断线程的代码" class="headerlink" title="线程的中断(interrupt())先于被中断线程的代码"></a>线程的中断(interrupt())先于被中断线程的代码</h3><h3 id="对象的构造函数执行结束先于finalize-方法"><a href="#对象的构造函数执行结束先于finalize-方法" class="headerlink" title="对象的构造函数执行结束先于finalize()方法"></a>对象的构造函数执行结束先于finalize()方法</h3><h1 id="线程安全的概念"><a href="#线程安全的概念" class="headerlink" title="线程安全的概念"></a>线程安全的概念</h1><p>指某个函数、函数库在多线程环境中被调用时，能够正确地处理各个线程的局部变量，使程序功 能正确完成。</p><p>i++在多线程下访问的情况<br><img alt="" data-original="/images/15488910582903.png"></p><p>i++是static的一个变量，在多线程中不是线程安全的，一个线程在读的时候，另一个线程也在读，一个线程在写的时候，另一个线程也在写，所以写和读的时候值会被另外一个线程覆盖掉。甚至线程很多的时候，i可能会越加越小，</p><p>解决：阻塞的方式<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AccountingSync</span> <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> AccountingSync instance=<span class="keyword">new</span> AccountingSync(); <span class="keyword">static</span> int i=<span class="number">0</span>;</span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;<span class="number">10000000</span>;j++)&#123; synchronized(instance)&#123;</span><br><span class="line">  &#125; &#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;原子性&quot;&gt;&lt;a href=&quot;#原子性&quot; class=&quot;headerlink&quot; title=&quot;原子性&quot;&gt;&lt;/a&gt;原子
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java高并发程序设计学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高并发" scheme="http://mmmmmm.me/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计学习笔记（二）：多线程基础</title>
    <link href="http://mmmmmm.me/2019-01-31.html"/>
    <id>http://mmmmmm.me/2019-01-31.html</id>
    <published>2019-01-18T11:20:01.000Z</published>
    <updated>2019-01-30T23:26:13.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h1><p>线程是进程内的执行单元。<br>每个进程中有若干个线程，进程的切换是非常重量型的，所线程可以作为较为广泛的并发涉及</p><p>java中调动了线程会映射到操作系统中，两者是等价的</p><h1 id="线程的基本操作"><a href="#线程的基本操作" class="headerlink" title="线程的基本操作"></a>线程的基本操作</h1><p><img alt="" data-original="/images/15488896735763.png"></p><h1 id="线程的基本操作-1"><a href="#线程的基本操作-1" class="headerlink" title="线程的基本操作"></a>线程的基本操作</h1><h2 id="新建线程"><a href="#新建线程" class="headerlink" title="新建线程"></a>新建线程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread(); t1.start();</span><br><span class="line">每一个线程都是runable接口的实现</span><br><span class="line">start方法就能把这个线程跑起来，开启一个线程</span><br><span class="line">在一个新的操作系统的线程上面调用run方法</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread(); t1.run(); </span><br><span class="line">不能开启线程</span><br></pre></td></tr></table></figure><p><strong><font color="red">调用run方法和调用start方法做的事情是一样的 ，但是run并不会开启新的线程而是在调用run的当前的这个线程当中执行这个操作，只有使用的start方法才是在真的一个新的线程当中执行run中的事情</font></strong></p><p>Thread.run()的实现 target 是Runnable接口（run是runnable接口中的一个方法）<br>run方法源码<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private Runnable target;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line"> target.run();</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p></p><p>Thread 的init方法：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Thread()&#123;</span><br><span class="line">init(<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">"Thread-"</span>+nextThreadNum(),<span class="number">0</span>)</span><br><span class="line"><span class="comment">//init方法是在new对象的时候自动执行的</span></span><br><span class="line">&#125;</span><br><span class="line">private <span class="keyword">void</span> init(ThreadGroup g, Runnable target, <span class="built_in">String</span> name,</span><br><span class="line">                      long stackSize) &#123;</span><br><span class="line">        init(g, target, name, stackSize, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="调用run的一种方式"><a href="#调用run的一种方式" class="headerlink" title="调用run的一种方式"></a>调用run的一种方式</h2><p>这里的target本身就是传的null，所以就可以把run方法重载，把我们的方法写进去<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread()&#123; </span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello, I am t1"</span>);</span><br><span class="line">&#125; &#125;;</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><p></p><h2 id="调用run另的一种方式"><a href="#调用run另的一种方式" class="headerlink" title="调用run另的一种方式"></a>调用run另的一种方式</h2><p>将target传到init方法中，来运行run方法。如下面CreateThread3（一个runnable的实例），这里不需要重载run方法，t1.start()的时候会自动去调用target.run。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> CreateThread3()); t1.start();</span><br></pre></td></tr></table></figure><p></p><h2 id="终止线程-（弃用）"><a href="#终止线程-（弃用）" class="headerlink" title="终止线程  （弃用）"></a>终止线程 <strong><font color="red">（弃用）</font></strong></h2><p>– Thread.stop() 不推荐使用。它会释放所有monitor<br>记录1:ID=1，NAME=小明<br>记录2:ID=2，NAME=小王</p><p><img alt="" data-original="/images/15488896869599.png"></p><p>如上图，在读和写的时候加入锁，当写完id，正要写name的时候，stop掉了thread，这个时候，会把锁释放掉，导致将id写了进去，name没有写进去，出现数据的不一致。</p><h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><p>public void Thread.interrupt() // 中断线程<br>public boolean Thread.isInterrupted() // 判断是否被中断<br>public static boolean Thread.interrupted() // 判断是否被中断，并清除当前中断状态<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> run()&#123; <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125; &#125;</span><br><span class="line">t1.interrupt();</span><br></pre></td></tr></table></figure><p></p><p>t1.interrupt();我只是告诉线程你应该终止了，对线程没有任何的影响，还是在跑着的。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> run()&#123; <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">System.out.println(<span class="string">"Interruted!"</span>); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p></p><p>通过Thread.currentThread().isInterrupted()判断当前的线程是不是被interrupt（），告知过要中断，是的话就break出while循环，同时终止run方法，也就自动终止了thread，这里不会出现数据的不一致，因为是在Thread.yield();（下一次数据处理之前）对线程进行终止的。<br><strong><font color="red">拓展</font></strong></p><p>public static native void sleep(long millis) throws InterruptedException<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> run()&#123; <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Thread.currentThread().isInterrupted())&#123; </span><br><span class="line">System.out.println(<span class="string">"Interruted!"</span>);</span><br><span class="line"><span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"Interruted When Sleep"</span>); </span><br><span class="line"><span class="comment">//设置中断状态，抛出异常后会清除中断标记位 </span></span><br><span class="line">Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br><span class="line"> Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>sleep即休眠方法。为什么休眠方法需要抛出 throws InterruptedException异常呢？<br>如果我在休眠的过程中，线程出现了isInterrupted（中断）的请求怎么办？这个时候如果sleep会抛出一个异常，同时自动清除interrupt（）设置的标志位，所以需要在抛出的异常中添加Thread.currentThread().interrupt();以保证能够被上面的Thread.currentThread().isInterrupted()检测到从而中断线程。</p><h2 id="挂起-suspend-和继续执行-resume-线程-弃用"><a href="#挂起-suspend-和继续执行-resume-线程-弃用" class="headerlink" title="挂起(suspend)和继续执行(resume)线程     (弃用)"></a>挂起(suspend)和继续执行(resume)线程 <strong><font color="red">(弃用)</font></strong></h2><p><strong><font color="red">suspend()不会释放锁 </font></strong>，发现suspend之后现场称还是runnable的状态，当然不代表所有的挂起后线程会runnable。<br>如果加锁发生在resume()之前 ，则死锁发生<br><img alt="" data-original="/images/15488897021929.png"></p><p>如上图，线程1挂起可，这个时候没有释放锁，希望通过线程2来resume锁，但是线程2的resume可能意外的发生在suspend之前，这个时候线程1将会永远的挂，其他的锁（如上图线程3）将会无线等待线程1拿到的锁。</p><h2 id="等待线程结束-join-和谦让-yeild"><a href="#等待线程结束-join-和谦让-yeild" class="headerlink" title="等待线程结束(join)和谦让(yeild)"></a>等待线程结束(join)和谦让(yeild)</h2><h3 id="yeild"><a href="#yeild" class="headerlink" title="yeild"></a>yeild</h3><p>当前线程优先级不是特别高，希望其他线程有机会争夺cpu时间，所以讲当前占用的cpu事件释放掉，使得其他的线程有更多的机会继续往下执行，但是下次还是有机会拿到cpu时间，不代表永远的让出去。</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>线程a希望知道线程b什么时候结束，因为需要在线程b结束的时候来立马做某些事情。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JoinMain</span> </span>&#123;</span><br><span class="line">public volatile <span class="keyword">static</span> int i=<span class="number">0</span>;</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">@Override public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++); &#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">AddThread at=<span class="keyword">new</span> AddThread();</span><br><span class="line"> at.start();</span><br><span class="line">at.join();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p></p><p>如上面的代码，希望在主线程中加入at方法，在at方法执行完毕之后再执行System.out.println(i);这句话。</p><p>join（有时间和没时间的，如果有无参数就是无限等待，有参数，就是等待一段时间如果还没有结束就继续往下执行，我等不起。）<br>join的本质<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">wait(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果线程是isalive（没死掉的），就无线等待，直到线程执行完毕后， 系统会调用 notifyAll()，注意 **<font color="red"> 不要在Thread实例上使用 wait()和notify()方法</font></p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>在后台默默地完成一些系统性的服务，比如垃圾回收线程、JIT线程就可以理解为守护线程<br>当一个Java应用内，只有守护线程时，Java虚拟机就会自然退出<br>Thread t=new DaemonT(); t.setDaemon(true); t.start();<br>举例子：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  psvm()&#123;</span><br><span class="line">Thread t =<span class="keyword">new</span> DeamonT();</span><br><span class="line">t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>会发现，刚启动程序，就自动停掉了。</p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>public final static int MIN_PRIORITY = 1;<br>public final static int NORM_PRIORITY = 5;<br>public final static int MAX_PRIORITY = 10;<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread high=<span class="keyword">new</span> HightPriority(); LowPriority low=<span class="keyword">new</span> LowPriority(); </span><br><span class="line">high.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">low.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">low.start();</span><br><span class="line">high.start();</span><br></pre></td></tr></table></figure><p></p><p>low的优先级比high高<br>高优先级的线程更容易再竞争中获胜</p><h1 id="基本的线程同步操作"><a href="#基本的线程同步操作" class="headerlink" title="基本的线程同步操作"></a>基本的线程同步操作</h1><h2 id="synchronized-（注意拿到的东西必须是同一个"><a href="#synchronized-（注意拿到的东西必须是同一个" class="headerlink" title="synchronized     （注意拿到的东西必须是同一个)"></a>synchronized <strong><font color="red">（注意拿到的东西必须是同一个)</font></strong></h2><p>这个关键字是java内置的，所有的实现是在虚拟机内部做的，包括拿锁、线程挂起、挂起之前做的优化等待等。<br>– 指定加锁对象:对给定对象加锁，进入同步代码前要获得给定对象的锁。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AccoutingSync2</span>  <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> AccoutingSync2 instance = <span class="keyword">new</span> AccoutingSync2();</span><br><span class="line"><span class="keyword">static</span> int i =<span class="number">0</span> ;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">synchronized (instance) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>– 直接作用于实例方法:相当于对当前实例加锁，进入同步代码前要获得当前实例的锁。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AccoutingSync2</span>  <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">//static AccoutingSync2 instance = new AccoutingSync2();</span></span><br><span class="line"><span class="keyword">static</span> int i =<span class="number">0</span> ;</span><br><span class="line">public synchronized <span class="keyword">void</span> increase()&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">increase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line"><span class="comment">//Thread t1 = new Thread(new AccoutingSync2());</span></span><br><span class="line"><span class="comment">//Thread t2 = new Thread(new AccoutingSync2());</span></span><br><span class="line">AccoutingSync2 accoutingSync2 = <span class="keyword">new</span> AccoutingSync2();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(accoutingSync2);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(accoutingSync2);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong><font color="red">注意上面的mian方法的两行注释，如果new两次AccoutingSync2，是两个对象，这样作用于方法上的锁，并不是一个实例对象，是不对的，必须是一个实例对象才能用这种方法。</font></strong></p><p>– 直接作用于静态方法:相当于对当前类加锁，进入同步代码前要获得当前类的锁。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">AccoutingSync2</span>  <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">//static AccoutingSync2 instance = new AccoutingSync2();</span></span><br><span class="line"><span class="keyword">static</span> int i =<span class="number">0</span> ;</span><br><span class="line">public synchronized <span class="keyword">void</span> increase()&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">increase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AccoutingSync2());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AccoutingSync2());</span><br><span class="line"><span class="comment">//AccoutingSync2 accoutingSync2 = new AccoutingSync2();</span></span><br><span class="line"><span class="comment">//Thread t1 = new Thread(accoutingSync2);</span></span><br><span class="line"><span class="comment">//Thread t2 = new Thread(accoutingSync2);</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong><font color="red">将上面的代码微整，将synchronized修饰的方法变为static的，这个方法是属于类的，此时main函数中的Thread可以通过new AccoutingSync2()的方式来new。</font></strong></p><h2 id="Object-wait-Obejct-notify"><a href="#Object-wait-Obejct-notify" class="headerlink" title="Object.wait() Obejct.notify()"></a>Object.wait() Obejct.notify()</h2><p>Object.wait()线程等待在当前对象上<br>Obejct.notify()通知等待在这个对象上的wait（）函数返回</p><p>Object.wait()必须要先获得当前object的锁才能去调用wait方法<br>Obejct.notify()也必须获得当前的object<br><strong><font color="red">注意：共有的锁必须在执行到synchronized代码之后才会被完全的释放</font></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">Object</span> object = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line">synchronized (object)&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T1 start!"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T1 wait for object "</span>);</span><br><span class="line">object.wait();</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">"T1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line">synchronized (object)&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T2 start! notify one thread!"</span>);</span><br><span class="line">object.notify();</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">"T2 end"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> T1();</span><br><span class="line">Thread t2 = <span class="keyword">new</span> T2();</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red"><br>注意上面的代码中wait和notify两个方法执行之前都需要获得object这个锁，包括wait的继续向下也需要这个锁<br>比如，打印出System.out.println(System.currentTimeMillis()+”T2 end”);这句话之后会不会立即打印出System.out.println(System.currentTimeMillis()+”T1 end”);？<br>答：不会因为wait和notify都在共用object这个锁，在输出System.out.println(System.currentTimeMillis()+”T2 end”);这句话的时候还没有完全释放object对象，简单来说就是代码还在synchronized (object){}这个代码块中，所以只能在等待sleep2000之后再重新回来执行T1 end的操作。</font><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">154604567447</span>：T1 start</span><br><span class="line"><span class="number">154604567441</span>：T1  wait <span class="keyword">for</span> object</span><br><span class="line"><span class="number">154604567442</span>：T2 start ! notify one thread!</span><br><span class="line"><span class="number">154604567443</span>：T2 end</span><br><span class="line"><span class="number">154604567444</span>：T1 end</span><br></pre></td></tr></table></figure><p>具体停留两秒的效果还需要读者自己尝试</p><p><img alt="" data-original="/images/15488897542597.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.omg.PortableServer.THREAD_POLICY_ID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">Object</span> object = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line">synchronized (object)&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T1 start!"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T1 wait for object "</span>);</span><br><span class="line">object.wait();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">"T1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">public <span class="keyword">void</span> run()&#123;</span><br><span class="line">synchronized (object)&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">":T2 start! notify one thread!"</span>);</span><br><span class="line">object.notifyAll();</span><br><span class="line">System.out.println(System.currentTimeMillis()+<span class="string">"T2 end"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws InterruptedException &#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> T1();</span><br><span class="line">Thread t2 = <span class="keyword">new</span> T2();</span><br><span class="line">Thread t3 = <span class="keyword">new</span> T1();</span><br><span class="line">t1.start();</span><br><span class="line">t3.start();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述：<br>可以看到上面的代码中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object.wait();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这里在wait方法后进行了sleep，创建了两个t1，将两个释放都释放的时候，中间会间断一秒，同时印证了上面必须要让程序执行到synchronize代码块外面之后再进行下一步。</p><p>运行结果<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">154604567447</span>：T1 start</span><br><span class="line"><span class="number">154604567441</span>：T1  wait <span class="keyword">for</span> object</span><br><span class="line"><span class="number">154604567442</span>：T1 start</span><br><span class="line"><span class="number">154604567443</span>：T1  wait <span class="keyword">for</span> object</span><br><span class="line"><span class="number">154604567444</span>：T2 start ! notify one thread!</span><br><span class="line"><span class="number">154604567445</span>：T2 end</span><br><span class="line"><span class="number">154604567446</span>：T1 end</span><br><span class="line"><span class="number">154604567448</span>：T1 end</span><br></pre></td></tr></table></figure><p></p><p>具体停留效果需要读者亲自尝试。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;什么是线程？&quot;&gt;&lt;a href=&quot;#什么是线程？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java高并发程序设计学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高并发" scheme="http://mmmmmm.me/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计学习笔记（一）：并行简介以及重要概念</title>
    <link href="http://mmmmmm.me/2019-01-30.html"/>
    <id>http://mmmmmm.me/2019-01-30.html</id>
    <published>2019-01-18T11:20:00.000Z</published>
    <updated>2019-01-30T23:06:09.005Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><h1 id="为什么需要并行"><a href="#为什么需要并行" class="headerlink" title="为什么需要并行?"></a>为什么需要并行?</h1><p>– 业务要求<br>– 性能</p><h1 id="反对意见"><a href="#反对意见" class="headerlink" title="反对意见"></a>反对意见</h1><p>– Linus Torvalds :忘掉那该死的并行吧!<br>– 需要有多么奇葩的想象力才能想象出并行计算的用武之地?<br>Linus Torvalds炮轰过的技术<br>– GNU Emacs<br>– GNOME<br>– HFS+ (Mac OS 文件系统)<br>– Java<br>• “本质上我看到的只是 Java 引擎在走下坡路，因为它别无去处。 ”1998年8月<br>• “我不关心Java。多么可怕的语言。“2011年11月<br>– C++<br>• “事实是，C++编译器不值得信任。整个C++异常处理从根本上是错误的。“2004年1月19日 “<br>• 尽管 C++ 可以用于原型或简单的 GUI 编程，但它不能使事情更简单。C 语言虽然并不精益于系统编程语言，但它积极鼓励你使用简单和直接的结构。 “2007年9月7日<br>• “C ++ 是一个可怕的语言。”2007年9月6日<br>– XML<br>– Solaris<br>– MINIX</p><p>Linus Torvalds :并行计算只有在图像处理和服务端编程2个领域可以使用，并且它在这2个 领域确实有着大量广泛的使用。但是在其它任何地方，并行计算毫无建树!</p><h1 id="大势所趋"><a href="#大势所趋" class="headerlink" title="大势所趋"></a>大势所趋</h1><p>摩尔定律的失效<br>– 预计18个月会将芯片的性能提高一倍<br>– Intel CEO Barret单膝下跪对取消4GHz感到抱歉 • 在2004年秋季，Intel宣布彻底取消4GHz计划<br>– 虽然现在已经有了4GHZ的芯片，但频率极限已经逼近 10年过去了，我们还停留在4GHZ</p><p>顶级计算机科学家唐纳德·尔文·克努斯<br>– 在我看来，这种现象(并发)或多或少是由于硬件设计者 – 已经无计可施了导致的，他们将摩尔定律失效的责任 – 推脱给软件开发者。</p><p>并行计算还出于业务模型的需要<br>– 并不是为了提高系统性能，而是确实在业务上需要多个执行单元。 – 比如HTTP服务器，为每一个Socket连接新建一个处理线程<br>– 让不同线程承担不同的业务工作<br>– 简化任务调度</p><h1 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h1><h2 id="同步-synchronous-和异步-asynchronous"><a href="#同步-synchronous-和异步-asynchronous" class="headerlink" title="同步(synchronous)和异步(asynchronous)"></a>同步(synchronous)和异步(asynchronous)</h2><p><img alt="" data-original="/images/15488603988188.png"></p><p>同步异步是对于方法调用而言的。<br>同步调用会等待方法的返回，方法执行多久就要等待多久。<br>异步调用瞬间返回，但是调用并没有完成，会在后台起一个线程，所以不影响做下面的事情。</p><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p><img alt="" data-original="/images/15488604073805.png"></p><p>并发和并行的外在表象基本上是一致的。<br>并行：两个线程或者进程同时进行<br>并发：一会做事件a一会做事件b，如此重复调度<br>对于单核cpu来说只能是并发，对于多核cpu来说是可以并行的，但是对于外在表象来看，事件a和事件b不论是并行还是并发，都是在同时执行</p><h2 id="临界区"><a href="#临界区" class="headerlink" title="  临界区  "></a><strong><font color="red"> 临界区</font></strong></h2><p>– 临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用。但是每一次，只能有一个线程<br>使用它，一旦临界区资源被占用，其他线程要想使用这个资源，就必须等待。<br><img alt="" data-original="/images/15488604162301.png"></p><h2 id="阻塞-Blocking-和非阻塞-Non-Blocking"><a href="#阻塞-Blocking-和非阻塞-Non-Blocking" class="headerlink" title="阻塞(Blocking)和非阻塞(Non-Blocking)"></a>阻塞(Blocking)和非阻塞(Non-Blocking)</h2><p>– 阻塞和非阻塞通常用来形容多线程间的相互影响。比如一个线程占用了临界区资源，那么其它所有需要 这个资源的线程就必须在这个临界区中进行等待，等待会导致线程挂起。这种情况就是阻塞。此时，如 果占用资源的线程一直不愿意释放资源，那么其它所有阻塞在这个临界区上的线程都不能工作。<br>– 非阻塞允许多个线程同时进入临界区</p><p>阻塞是在操作系统层面被挂起，阻塞的方式性能比较差，据统计，如果一个线程在操作系统层面被挂起，做了上下文切换，需要八万个时间周期来做这件事情，所以不是一个特别好的办法，但是是最简单的方法，虽然效率不是很高。</p><h2 id="死锁-Deadlock-、饥饿-Starvation-和活锁-Livelock"><a href="#死锁-Deadlock-、饥饿-Starvation-和活锁-Livelock" class="headerlink" title="死锁(Deadlock)、饥饿(Starvation)和活锁(Livelock)"></a>死锁(Deadlock)、饥饿(Starvation)和活锁(Livelock)</h2><p><img alt="" data-original="/images/15488604280104.png"></p><ol><li><p>死锁：a堵住了d，d堵住了c，c堵住了b，b堵住了a，a需要b开动，b需要c开动，c需要d开动，d需要a开动—–谁也不能动。<br>死锁虽然不好，但是是一个静态的问题，一旦死锁，所有的线程都停止，cpu的占用率是零</p></li><li><p>活锁：电梯里人想出来，外面的人想进去，都想避开，里面的人往左面靠，外面的人往右边靠，还是不能避开，里面的人往右面靠，外面的人往左边靠，如此往复。<br>又或者a线程需要资源1、2，b线程需要资源1、2，这个时候a抢到了1，b抢到了2，都不能工作，这个时候都释放出来，a又去抢到了2，b抢到了1，如此往复。<br>简言之，就是资源来线程之间跳来跳去，也无法进行下去。<br>活锁比死锁更难查找，因为是动态的问题。</p></li><li><p>饥饿：a线程优先级比b低，所以调度的时候调度不到a，就不能继续往下执行，就会饿死，或者资源竞争优先级比较低，也会导致饿死。<br>饥饿是指某一个或 者多个线程因为种 种原因无法获得所 需要的资源，导致 一直无法执行。</p><h2 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h2></li><li>阻塞:当一个线程进入临界区后，其他线程必须等待</li><li>非阻塞（下面三个）</li></ol><h3 id="–-无障碍"><a href="#–-无障碍" class="headerlink" title="– 无障碍"></a>– 无障碍</h3><p>无障碍是一种最弱的非阻塞调度<br>自由出入临界区<br>无竞争时，有限步内完成操作<br>有竞争时，回滚数据有竞争时，回滚数据<br>好进不好出，很容易进去，但是进去发现很多线程竞争相同的资源的时候，会需要回滚数据，比如要读取xy，已经读过了x，读到y的时候发现在竞争，会从x重新读。</p><h3 id="–-无锁"><a href="#–-无锁" class="headerlink" title="– 无锁"></a>– 无锁</h3><p>是无障碍的<br>保证有一个线程可以胜出<br>while (!atomicVar.compareAndSet(localVar, localVar+1)) {<br>localVar = atomicVar.get();<br>}<br>因为无障碍中，如果存在不断的竞争，将会所有的都出不来，所以无锁就需要每次竞争都能胜出一个，这样保证程序能够顺畅的执行下去。</p><h3 id="–-无等待"><a href="#–-无等待" class="headerlink" title="–   无等待"></a>– 无等待</h3><p>无锁的<br>要求所有的线程都必须在有限步内完成 ，所有的线程都能在有线的事件内都从临界区出来。<br>无饥饿的，因为所有的线程都必须在有限步内完成 ，所以是无饥饿的。<br>举例子：<br>只有读线程没有写线程，就是无等待的。<br>如果有写线程的话，就会出现资源竞争也就是上面的无障碍的状态，怎么办呢？在每次写之前把数据拷贝一次副本，在写线程中拿到副本，修改副本，修改数据的过程可能需要点时间，可是修改的是副本不是原始的数据，所以在这个过程中的读线程仍然是无等待的。写线程也只是一直在写，所以也是无等待的。<br>最后需要时就是将副本覆盖原始数据而已。</p><h1 id="有关并行的2个重要定律"><a href="#有关并行的2个重要定律" class="headerlink" title="有关并行的2个重要定律"></a>有关并行的2个重要定律</h1><p>Amdahl定律(阿姆达尔定律)<br>Gustafson定律(古斯塔夫森)</p><h2 id="Amdahl定律-阿姆达尔定律"><a href="#Amdahl定律-阿姆达尔定律" class="headerlink" title="Amdahl定律(阿姆达尔定律)"></a>Amdahl定律(阿姆达尔定律)</h2><p>– 定义了串行系统并行化后的加速比的计算公式和理论上限 – 加速比定义:加速比=优化前系统耗时/优化后系统耗时<br><img alt="" data-original="/images/15488604384317.png"></p><p>在步骤二和步骤五的地方运用了并行<br>加速比=优化前系统耗时/优化后系统耗时=500/400=1.25<br><img alt="" data-original="/images/15488604475199.png"></p><p>将上面的例子代入公式：f（串行比例）= 五分之三，这里默认两个cpu<br><img alt="" data-original="/images/15488604582818.png"></p><p>由上面的公式可以得出：<br>增加CPU处理器的数量（n）并不一定能起到有效的作用 提高系统内可并行化的模块比重，合理增加并行处 理器数量（1-f），才能以最小的投入，得到最大的加速比</p><h2 id="Gustafson定律-古斯塔夫森"><a href="#Gustafson定律-古斯塔夫森" class="headerlink" title="Gustafson定律(古斯塔夫森)"></a>Gustafson定律(古斯塔夫森)</h2><p>– 说明处理器个数，串行比例和加速比之间的关系<br><img alt="" data-original="/images/15488604673216.png"></p><p>只要有足够的并行化，那么加速 比和CPU个数成正比</p><p>结论：两个结论虽然不同，但是总的来说就是要处理好n（cpu的个数）和f（串行化比例），因为公式中只和这两个参数有关系。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;为什么需要并行&quot;&gt;&lt;a href=&quot;#为什么需要并行&quot; class=&quot;headerlink&quot; title=&quot;为什么
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java高并发程序设计学习笔记" scheme="http://mmmmmm.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高并发" scheme="http://mmmmmm.me/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(十)，博文加密，不需要插件，极简模式，相对安全，融合pjax</title>
    <link href="http://mmmmmm.me/hexo_shi_jiami.html"/>
    <id>http://mmmmmm.me/hexo_shi_jiami.html</id>
    <published>2018-12-20T14:52:00.000Z</published>
    <updated>2019-01-27T10:12:27.941Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_2.png"></p><blockquote><ul><li>关于next主题中加入博文加密功能的文章，我就是我不一样的烟火。</li></ul></blockquote><a id="more"></a><p>果想自定义功能样式的往下面看看也许会有点收获，为了避免读者不耐烦的看我的废话，所以移到了下面。<br>本人博客：mmmmmm.me</p><h1 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h1><p><img alt="upload successful" data-original="/images/my_blog_25.png"></p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><p>/blog/themes/next/layout/_layout.swig，找到main标签在吐下代码处添加自定义的swig<br>_layout.swig：<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pjax-container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-inner"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_third-party/duoshuo-hot-articles.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/comments.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.sidebar.display !== 'remove' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> sidebar %&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      //这个是我自己写的swig，因为需要得到post的password参数，名字自己随便起。</span></span><br><span class="line"><span class="xml">      //如果博客中加入了pjax需要放在pjax的container中，每次刷新会重新加载container中的内容，也就默认重新加载我们这个简单的js了，如果没有加入pjax的话，位置就不重要了</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'password.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>新建swig，目录：themes/next/layout/password.swig（和上面的_layout.swig在同级目录，具体路径在上面的include中可以自定义的。）<br>password.swig：<br></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//暂时储存文章中的内容</span></span><br><span class="line"><span class="keyword">var</span> div = $('.<span class="keyword">post</span>-body');</span><br><span class="line"><span class="comment">//暂时储存目录的内容</span></span><br><span class="line"><span class="keyword">var</span> toc=$('.<span class="keyword">post</span>-toc-wrap')</span><br><span class="line">function password() &#123;</span><br><span class="line">  <span class="keyword">if</span>('&#123;&#123; page.password &#125;&#125;')&#123;</span><br><span class="line">  <span class="comment">//将文章内容删除</span></span><br><span class="line">    div.remove();</span><br><span class="line"> <span class="comment">//将目录删除 </span></span><br><span class="line">    toc.remove();</span><br><span class="line">  <span class="comment">//将文章删除后，向原来文章的地方添加，应该出现的提示用户输入密码的样式</span></span><br><span class="line">  <span class="comment">//下面这里的第一个用textarea是因为如果在手机端的时候只能显示一部分文字，</span></span><br><span class="line">  <span class="comment">//只是拓展:input里面的字只能显示一行，不会自动换行，目前上网搜索没有发现好的办法，所以用了textarea，右下角的小三角通过resize:none 去掉。</span></span><br><span class="line">   $('.<span class="keyword">post</span>-header').after('&lt;textarea <span class="keyword">class</span>=<span class="string">"description"</span> value=<span class="string">"Please enter your password and press enter to build"</span> style=<span class="string">"border: none;display: block;' +'width: 60%;margin: 0 auto;text-align: center;outline: none;margin-bottom: 50px;resize:none "</span>&gt;</span><br><span class="line">      Please enter your password and press enter to build&lt;/textarea&gt;' +</span><br><span class="line">      '&lt;div <span class="keyword">class</span>=<span class="string">"qiang"</span> style=<span class="string">"height: 100px;width: 60%;margin:0 auto"</span>&gt;' +</span><br><span class="line">      '&lt;<span class="keyword">input</span> <span class="keyword">class</span>=<span class="string">"password"</span>  <span class="keyword">type</span>=<span class="string">"text"</span> value=<span class="string">""</span> style="border: none;<span class="keyword">display</span>: block;border-bottom: 1px solid #ccc;' +</span><br><span class="line">      'margin: 0 auto;outline: none;width:95%"/&gt;' +</span><br><span class="line">      '&lt;/div&gt;')</span><br><span class="line">      <span class="comment">//绑定点击事件，如果是点击的.password 这个div就改变样式，如果是document中除了div之外的其他任何元素，就变回原来的样式。</span></span><br><span class="line">    document.onclick = function (event) &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">e</span> = event || <span class="keyword">window</span>.event;</span><br><span class="line">      <span class="keyword">var</span> elem = <span class="keyword">e</span>.srcElement || <span class="keyword">e</span>.target;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (elem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem != document) &#123;</span><br><span class="line">          <span class="keyword">if</span> (elem.className == <span class="string">"password"</span>) &#123;</span><br><span class="line">            $(<span class="string">".password"</span>).animate(&#123;paddingTop:<span class="string">"30px"</span>,width:<span class="string">"100%"</span>,borderWidth:<span class="string">"2px"</span>&#125;,300)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          elem = elem.parentNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">".password"</span>).animate(&#123;paddingTop:<span class="string">"0px"</span>,width:<span class="string">"95%"</span>,borderWidth:<span class="string">"1px"</span>&#125;,300)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定enter键按下后离开的事件</span></span><br><span class="line">    $(document).keyup(function(event)&#123;</span><br><span class="line">      <span class="keyword">if</span>(event.keyCode ==13&amp;&amp;$('.password').length&gt;0)&#123;</span><br><span class="line">        <span class="comment">//console.log($('.password').val())</span></span><br><span class="line">        <span class="comment">//console.log('&#123;&#123; page.password &#125;&#125;')</span></span><br><span class="line">        <span class="keyword">if</span> ($('.password').val() == '&#123;&#123; page.password &#125;&#125;') &#123;</span><br><span class="line">        <span class="comment">//恢复文章内容</span></span><br><span class="line">          (div).appendTo($(<span class="string">".post-header"</span>))</span><br><span class="line">          <span class="comment">//恢复目录</span></span><br><span class="line">          toc.appendTo($(<span class="string">".sidebar-inner"</span>))</span><br><span class="line">                 <span class="comment">//删除本页面的输入密码组件</span></span><br><span class="line">           $(<span class="string">".description"</span>).remove();</span><br><span class="line">          $(<span class="string">".qiang"</span>).remove();</span><br><span class="line">          $(<span class="string">".password"</span>).remove();</span><br><span class="line">          <span class="comment">//重新处理pjax事件,如果没有加pjax的从下面这行起到下面的else之间的代码需要去掉。</span></span><br><span class="line">          <span class="comment">//图片懒加载，没有加入此功能的这个函数需要去掉</span></span><br><span class="line">          $('img').lazyload(&#123;</span><br><span class="line">             placeholder: '/images/loading.gif',</span><br><span class="line">             effect: 'fadeIn',</span><br><span class="line">             threshold : 100,</span><br><span class="line">             failure_limit : 20,</span><br><span class="line">             skip_invisible : false</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="comment">//pjax后出现文章不显示，没有pjax的下面四行需要去掉</span></span><br><span class="line">            $(<span class="string">".post-block"</span>).css(&#123;opacity:1&#125;);</span><br><span class="line">            $(<span class="string">".post-header"</span>).css(&#123;opacity:1&#125;);</span><br><span class="line">            $(<span class="string">".post-body"</span>).css(&#123;opacity:1&#125;);</span><br><span class="line">            $(<span class="string">".pagination"</span>).css(&#123;opacity:1&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">"Sorry, the password is wrong."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将document的keyup移除，防止在pjax的情况下会重复绑定事件</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">password();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>新建一个test.md<br>test.md<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">测试</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-03</span><span class="bullet">-30</span> <span class="number">21</span><span class="string">:18:02</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">aaa</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># aaaaaa</span></span><br><span class="line"><span class="string">我就很反感大家老是那么说我，</span></span><br><span class="line"><span class="comment">## bbbbbb</span></span><br><span class="line"><span class="string">除了有才，就只剩下那无可比拟的颜值。</span></span><br></pre></td></tr></table></figure><p></p><p>上面的password后面的值自定义。</p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>如果自己的博客源码中的这篇文章上传到github，密码也就公诸于世了，可以再push到github的时候将这篇文章忽略。</p><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>预给自己加入文章加密的功能。</p><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><h2 id="https-www-jianshu-com-p-90c0a15c6f36"><a href="#https-www-jianshu-com-p-90c0a15c6f36" class="headerlink" title="https://www.jianshu.com/p/90c0a15c6f36"></a><a href="https://www.jianshu.com/p/90c0a15c6f36" target="_blank" rel="noopener">https://www.jianshu.com/p/90c0a15c6f36</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入查看密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码不正确,请询问主编大大'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>不用试看看也知道没问题，可是网上说这个容易被破解，因为只是在alert的时候不显示，但是懂编程的人只要打开审查工具就能看到了。pass</p><h2 id="http-zhailiange-com-2017-07-06-hexo-encrypt"><a href="#http-zhailiange-com-2017-07-06-hexo-encrypt" class="headerlink" title="http://zhailiange.com/2017/07/06/hexo-encrypt/"></a><a href="http://zhailiange.com/2017/07/06/hexo-encrypt/" target="_blank" rel="noopener">http://zhailiange.com/2017/07/06/hexo-encrypt/</a></h2><p>hexo-blog-encrypt插件和hexo-encrypt插件，同样尝试过，如果没有pjax肯定是没问题的，因为我加入了pjax在跳转页面的时候有的js会不加载，所以会报错，放弃</p><h2 id="自己写"><a href="#自己写" class="headerlink" title="自己写"></a>自己写</h2><p>一开始通过网_layout.swig里面引入 script的方式，可是在js文件中是的不到hexo自定义的page变量的（hexo中还有好多变量，比如site，theme等），所以在swig中能够得到这个变量，也就是我们文章中的password，当然你还可以自定义许多变量，比如在config文件中定义是否使用password功能，在文章中增加message（简称就是输入密码上方给用户说的话，或者文章的简单概要等，自定义即可）标签，然后通过js读到本篇文章的message，自定义的添加到页面中展示给用户，等等都可以通过来得到。<br>当然自己写的初衷就是因为自己的pjax，这下子，终于可以成功的完美融合到pjax中，还学到不少的只是呢。</p><h1 id="2018-12-23代码更新"><a href="#2018-12-23代码更新" class="headerlink" title="2018.12.23代码更新"></a>2018.12.23代码更新</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>发现输入密码成功之后，在页面的底部还有请输入密码的组件,在恢复文章的后面加下面三行（已在上面的代码中更新）<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".description"</span>).remove();</span><br><span class="line">$(<span class="string">".qiang"</span>).remove();</span><br><span class="line">$(<span class="string">".password"</span>).remove();</span><br></pre></td></tr></table></figure><p></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>因为博客中加入了pjax，在局部刷新的时候，$(document).keyup并没有移除，所以当点击某文章的时候第一次没问题，再不刷新页面的情况下，再次进入，第二次进入的时候是通过pjax进入的，这样就给$(document)绑定了两次keyup事件，第三次的话就会绑定三次，第四次绑定四次，如此往复，出现的现象是前几次报密码错误，最后一次进入正常，调试的时候前几次得到的password的value值都是undifined<br>解决：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:start'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).unbind(<span class="string">'keyup'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p></p><p>在每次pjax发送请求开始就移除事件。</p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>当输入密码进入页面，按回车键会不断的alert 密码错误<br>加入判断（上面已经修改）<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;$(<span class="string">'.password'</span>).length&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_2.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;关于next主题中加入博文加密功能的文章，我就是我不一样的烟火。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(九)，给博客加入主题，护眼主题，护眼色</title>
    <link href="http://mmmmmm.me/hexo_jiu_eye.html"/>
    <id>http://mmmmmm.me/hexo_jiu_eye.html</id>
    <published>2018-12-18T12:37:00.000Z</published>
    <updated>2019-01-27T10:11:54.400Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_1.png"></p><blockquote><ul><li>一篇关于next主题中加入保护眼睛的护眼色的功能，做自己的贴心小棉袄吧。</li></ul></blockquote><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我从小爱打游戏，所以视力下降厉害，加上现在工作天天对着电脑，所以想给自己的博客加上护眼色。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>博客：mmmmmm.me</p><p><img alt="upload successful" data-original="/images/my_blog_23.png"></p><p><img alt="upload successful" data-original="/images/my_blog_24.png"></p><h1 id="码"><a href="#码" class="headerlink" title="码"></a>码</h1><h2 id="layout-swig"><a href="#layout-swig" class="headerlink" title="_layout.swig"></a>_layout.swig</h2><p>在body下面<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:#C7EDCC"</span>&gt;</span>豆沙绿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:#FAF9DE"</span>&gt;</span>杏仁黄 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:#FFFFFF"</span>&gt;</span>银河白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:#000000"</span>&gt;</span>极光黑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye2"</span>&gt;</span>满天星<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="custom-styl"><a href="#custom-styl" class="headerlink" title="custom.styl"></a>custom.styl</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.eye</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">68px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">66px</span>;</span><br><span class="line">  <span class="comment">//background-color:transparent;</span></span><br><span class="line">  <span class="attribute">font-size</span> :<span class="number">12px</span>;</span><br><span class="line"><span class="attribute">line-height</span> :<span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">text-align</span> :center;</span><br><span class="line">  <span class="attribute">z-index</span> :<span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye1</span>&#123;</span><br><span class="line">    <span class="attribute">float</span> :left;</span><br><span class="line"><span class="attribute">display</span> :none;</span><br><span class="line">  <span class="attribute">height</span> :<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye1</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">height</span> :<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span> :<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span> :<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">.eye1 ul li&#123;</span><br><span class="line">  float :left;</span><br><span class="line">  <span class="attribute">width</span> :<span class="number">23px</span>;</span><br><span class="line">  <span class="attribute">line-height</span> :<span class="number">22px</span></span><br><span class="line">  text-align :center;</span><br><span class="line">  <span class="attribute">font-size</span> :<span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>:hover &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span> : <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eye2</span>&#123;</span><br><span class="line">  <span class="attribute">float</span> :left;</span><br><span class="line">  <span class="attribute">width</span> :<span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span> :<span class="number">22px</span></span><br><span class="line">  text-align :center;</span><br><span class="line">  <span class="attribute">font-size</span> :<span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#e6e6e6</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="selector-class">.eye2</span>:hover&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span> : <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="eye-js"><a href="#eye-js" class="headerlink" title="eye.js"></a>eye.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eye</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">".eye .eye2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".eye .eye1"</span>).slideToggle();</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  $(<span class="string">".eye ul li"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".eye .eye1"</span>).slideToggle();</span><br><span class="line">    $color=$(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log($color);</span><br><span class="line">    $(<span class="string">".eye .eye1"</span>).css(<span class="string">"background"</span>,$color);</span><br><span class="line">      $(<span class="string">"#canvas"</span>).css(<span class="string">"background"</span>,$color);</span><br><span class="line">      $(<span class="string">"article"</span>).css(<span class="string">"background"</span>,$color);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">eye()</span><br></pre></td></tr></table></figure><h1 id="引用eye-js"><a href="#引用eye-js" class="headerlink" title="引用eye.js"></a>引用eye.js</h1><h2 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h2><p>在_layout.swig<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"xxxxxxxxxx.eye.js"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><p></p><p>没有用到require.js和pjax的到这里就结束了，用了的往下看</p><hr><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"eye"</span>:<span class="string">"/js/src/pjax/eye"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'eye'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="pjax的函数中重写"><a href="#pjax的函数中重写" class="headerlink" title="pjax的函数中重写"></a>pjax的函数中重写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eye_js</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $color=$(<span class="string">"#canvas"</span>).css(<span class="string">"background"</span>);</span><br><span class="line">  $(<span class="string">"article"</span>).css(<span class="string">"background"</span>,$color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_1.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题中加入保护眼睛的护眼色的功能，做自己的贴心小棉袄吧。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(八)，微加速</title>
    <link href="http://mmmmmm.me/hexo_ba_jiasu.html"/>
    <id>http://mmmmmm.me/hexo_ba_jiasu.html</id>
    <published>2018-12-18T12:32:00.000Z</published>
    <updated>2019-01-27T09:48:42.788Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_3.png"></p><blockquote><ul><li>一篇关于next主题加速的小细节的文章，好吧我承认效果不是很明显。</li></ul></blockquote><a id="more"></a><p>通过不断地上网查资料，引用的js、css、图片文件，通过cdn的方式是比直接放到本地要慢的，所以将自己博客能找到的cdn全部换成本地文件。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_3.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题加速的小细节的文章，好吧我承认效果不是很明显。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(七)，cdn加速</title>
    <link href="http://mmmmmm.me/hexo_qi_cdn.html"/>
    <id>http://mmmmmm.me/hexo_qi_cdn.html</id>
    <published>2018-12-18T12:27:00.000Z</published>
    <updated>2019-01-27T09:48:52.453Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_4.png"></p><blockquote><ul><li>一篇关于next主题中加入cdn的文章，千万别点开，别怪我没提醒你，噢。</li></ul></blockquote><a id="more"></a><h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p>千万不要被我的标题迷惑，这不是一个给博客加cdn的博文。</p><h1 id="正题："><a href="#正题：" class="headerlink" title="正题："></a>正题：</h1><p>想给网站各种加速，终于到了cdn这块。</p><h2 id="免费cdn"><a href="#免费cdn" class="headerlink" title="免费cdn"></a>免费cdn</h2><p>“免费的都是最贵的”，百度的移动节点不能用，还有很多都是单节点，很多都是自己能访问，有的地区就访问不到，只有收费才能提供更好的服务，都是打着免费的幌子，变相的收费，遂放弃。</p><h2 id="收费cdn"><a href="#收费cdn" class="headerlink" title="收费cdn"></a>收费cdn</h2><p>有点贵，貌似100或者200 1Mb/s,对于我的小blog有点贵，以后流量多了肯定会接入的，经过前面的优化，感觉速度已经上升了一大截了，希望以后有机会搞大型网站，这样就可以不花自己的钱玩cdn了，坏坏哒~</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_4.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题中加入cdn的文章，千万别点开，别怪我没提醒你，噢。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(六)，使用hexo-neat插件压缩页面，大幅度提升页面性能和响应速度</title>
    <link href="http://mmmmmm.me/hexo_liu_yasuo.html"/>
    <id>http://mmmmmm.me/hexo_liu_yasuo.html</id>
    <published>2018-12-18T12:20:00.000Z</published>
    <updated>2019-01-27T09:49:02.572Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_5.png"></p><blockquote><ul><li>一篇关于next主题中加入发布压缩的插件，是不是速度又上了一个台阶？还有sei？</li></ul></blockquote><a id="more"></a><h1 id="隆重感谢："><a href="#隆重感谢：" class="headerlink" title="隆重感谢："></a>隆重感谢：</h1><p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener">https://blog.csdn.net/lewky_liu/article/details/82432003</a><br><a href="https://blog.csdn.net/qq_21808961/article/details/84639472" target="_blank" rel="noopener">https://blog.csdn.net/qq_21808961/article/details/84639472</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>hexo 的文章是通过md格式的文件经过swig转换成的html，生成的html会有很多空格，而且自己写的js以及css中会有很多的空格和注释。<br>js和java不一样，注释也会影响一部分的性能，空格同样是的。<br>经过上网查阅，发现hexo有自带的压缩插件。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="试水"><a href="#试水" class="headerlink" title="试水"></a>试水</h2><p>gulp<br>上网查阅资料，自己尝试过。<br>npm下载插件都下载中断了，可能我操作有误，有兴趣的小伙伴可以试一试。</p><h2 id="成功的案例"><a href="#成功的案例" class="headerlink" title="成功的案例"></a>成功的案例</h2><h3 id="安装插件，执行命令。"><a href="#安装插件，执行命令。" class="headerlink" title="安装插件，执行命令。"></a>安装插件，执行命令。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-neat <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="hexo-config-yml文件添加"><a href="#hexo-config-yml文件添加" class="headerlink" title="hexo _config.yml文件添加"></a>hexo _config.yml文件添加</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/index.js'</span></span><br></pre></td></tr></table></figure><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><h4 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h4><p>如果按照官方插件的文档说明来配置exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：<br>neat_css:<br>enable: true<br>exclude:</p><pre><code>- &apos;**/*.min.css&apos;</code></pre><h4 id="压缩html时不要跳过-md文件"><a href="#压缩html时不要跳过-md文件" class="headerlink" title="压缩html时不要跳过.md文件"></a>压缩html时不要跳过.md文件</h4><p>.md文件就是我们写文章时的markdown文件，如果跳过压缩.md文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p><h4 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过.swig文件</h4><p>.swig文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p><h4 id="点击的桃心效果消失"><a href="#点击的桃心效果消失" class="headerlink" title="点击的桃心效果消失"></a>点击的桃心效果消失</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    -<span class="ruby"> <span class="string">'**/*.min.js'</span></span></span><br><span class="line"><span class="ruby">    - <span class="string">'**/jquery.fancybox.pack.js'</span></span></span><br><span class="line"><span class="ruby">    - <span class="string">'**/index.js'</span>  </span></span><br><span class="line"><span class="ruby">    - <span class="string">'**/love.js'</span></span></span><br></pre></td></tr></table></figure><h4 id="gitalk-js文件报错"><a href="#gitalk-js文件报错" class="headerlink" title="gitalk js文件报错"></a>gitalk js文件报错</h4><p>在上面的代码底部加入如下代码</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> <span class="string">'**/comments.gitalk.js'</span></span></span><br></pre></td></tr></table></figure><h4 id="jquery-pjax-min-js报错"><a href="#jquery-pjax-min-js报错" class="headerlink" title="jquery pjax min js报错"></a>jquery pjax min js报错</h4><p>我这里的 jquery pjax min js是指的加入pjax前需要以来的两个cdn文件，一个是jq，一个是它，我将它下载到了本地，不要在意这些细节~<br>同样加入如下代码<br></p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> <span class="string">'**/jquery_pjax_min_js.js'</span></span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_5.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题中加入发布压缩的插件，是不是速度又上了一个台阶？还有sei？&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(五)，评论系统换成gittalk</title>
    <link href="http://mmmmmm.me/hexo_wu_gitalk.html"/>
    <id>http://mmmmmm.me/hexo_wu_gitalk.html</id>
    <published>2018-12-18T12:19:00.000Z</published>
    <updated>2019-01-27T09:49:14.017Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_6.png"></p><blockquote><ul><li>一篇关于next主题中加入gitalk评论系统的文章，让你的博客的来客如江水滔滔连绵不绝，又如黄河之水一发不可收拾。</li></ul></blockquote><a id="more"></a><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>之前一直用的是来必力的评论系统，还不错，但是因为我加入了pjax，能力有限，虽然降来必力的js重现，但是每次返回到首页都会报错id notfound ，阅读了来必力的api，全是并没有找到很多好的答案。遂换成gittalk的评论系统。</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h2 id="新建comments-git-js"><a href="#新建comments-git-js" class="headerlink" title="新建comments_git.js"></a>新建comments_git.js</h2><p>注：配置文件中的详细，自己网上查查。<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>($(<span class="string">'#gitalk-container'</span>).length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  var gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gitalk的主要参数</span></span><br><span class="line"><span class="string">clientID:</span> `Github Application clientID`,</span><br><span class="line"><span class="string">clientSecret:</span> `Github Application clientSecret`,</span><br><span class="line"><span class="string">repo:</span> `Github 仓库名`,<span class="comment">//存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名）</span></span><br><span class="line"><span class="string">owner:</span> <span class="string">'Github 用户名'</span>,</span><br><span class="line"><span class="string">admin:</span> [<span class="string">'Github 用户名'</span>], <span class="comment">//这个仓库的管理员，可以有多个，用数组表示，一般写自己,</span></span><br><span class="line"><span class="string">id:</span> <span class="string">'window.location.pathname'</span>, <span class="comment">//页面的唯一标识，gitalk 会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  gitalk.render(<span class="string">'gitalk-container'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="找到comments-swig在最后一个endif之前"><a href="#找到comments-swig在最后一个endif之前" class="headerlink" title="找到comments.swig在最后一个endif之前"></a>找到comments.swig在最后一个endif之前</h2><p>（目录：themes/next/layout/_partials/comments.swig）<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"gitalk-container"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="引入代码"><a href="#引入代码" class="headerlink" title="引入代码"></a>引入代码</h2><p>_layour.swig<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/comments/comments.gitalk.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在这里引入而不再require引入的原因，就像我的另一篇文章，define只能定义一次，引不进去。<br>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"music"</span>: <span class="string">"/dist/music"</span>,</span><br><span class="line">    <span class="string">"aplayer"</span>: <span class="string">"/js/src/aplayer"</span>,</span><br><span class="line">    <span class="string">"backgroudLine"</span>: <span class="string">"/js/src/backgroudLine"</span>,</span><br><span class="line">    <span class="string">"category"</span>: <span class="string">"/js/src/category"</span>,</span><br><span class="line">    <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">    <span class="comment">/*不显示图标的话替换fonts*/</span></span><br><span class="line">    <span class="string">"share"</span>:<span class="string">"/js/src/pjax/share"</span>,</span><br><span class="line">    <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span>,</span><br><span class="line">    <span class="string">"comments"</span>:<span class="string">"/js/src/pjax/comments_git"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  shim: &#123;</span><br><span class="line">    <span class="string">'share'</span>: &#123;</span><br><span class="line">      deps: [</span><br><span class="line">        <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'comments'</span>: &#123;</span><br><span class="line">      deps: [</span><br><span class="line">        <span class="string">'css!https://unpkg.com/gitalk/dist/gitalk'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'backgroudLine'</span>,<span class="string">'music'</span>,<span class="string">'aplayer'</span>,<span class="string">'category'</span>,<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>,<span class="string">'comments'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>如果没有用require的直接在_layout.swig<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//再引入comments_git.js</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"xxxxxxxxxx/comments_git.js"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="pjax加入gitalk"><a href="#pjax加入gitalk" class="headerlink" title="pjax加入gitalk"></a>pjax加入gitalk</h1><p>同样重新调用comments_git.js即可</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="所有的页面共享的一个评论issue"><a href="#所有的页面共享的一个评论issue" class="headerlink" title="所有的页面共享的一个评论issue"></a>所有的页面共享的一个评论issue</h2><p>这个好像到现在的版本，人家已经优化的很好了。<br>注意上年的comments_git.js<br>中的配置id 改为location.pathname，即<br></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">id:</span><span class="string"> location.pathname</span></span><br></pre></td></tr></table></figure><p></p><p>意思是，根据目录创建不同的iss</p><h2 id="本地4000启动报错401-没有权限"><a href="#本地4000启动报错401-没有权限" class="headerlink" title="本地4000启动报错401 没有权限"></a>本地4000启动报错401 没有权限</h2><p>push到远端就没问题了。</p><h2 id="未找到相关的Issues-进行评论，请联系xxx初始化创建"><a href="#未找到相关的Issues-进行评论，请联系xxx初始化创建" class="headerlink" title="未找到相关的Issues 进行评论，请联系xxx初始化创建"></a>未找到相关的Issues 进行评论，请联系xxx初始化创建</h2><p>这个issue每次需要管理员，即作者你创建，怎么创建呢？在你自己的博客进入评论，登录自己的github账号，访问没有创建issues的博客，就初始化了。<br>这样岂不是很麻烦？<br>解决博客：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdraveness.me%2Fgit-comments-initialize" target="_blank" rel="noopener">https://link.jianshu.com/?t=https%3A%2F%2Fdraveness.me%2Fgit-comments-initialize</a><br>这个方法，我试过，没有成功，时间有限，就不深追了~<br>tips：里面的sitmap地图，如果是next地图在网址:https://你的博客地址/sitemap.xml<br>以后有时间或者能力允许的话，可能会写一个类似爬虫的脚本，完成这一操作~</p><h3 id="发现自己的留言板明明评论了却不显示"><a href="#发现自己的留言板明明评论了却不显示" class="headerlink" title="发现自己的留言板明明评论了却不显示"></a>发现自己的留言板明明评论了却不显示</h3><p>原因：自己加入了pjax导致<br>手动刷新的地址是：<a href="https://mmmmmm.me/message/">https://mmmmmm.me/message/</a><br>pjax刷新的地址是：<a href="https://mmmmmm.me/message">https://mmmmmm.me/message</a><br>因为gitalk创建issues是根据地址来创建的，所以不同的地址当然issues是不一样的啊。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_6.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题中加入gitalk评论系统的文章，让你的博客的来客如江水滔滔连绵不绝，又如黄河之水一发不可收拾。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(四)，自定义一个share功能，share.js</title>
    <link href="http://mmmmmm.me/hexo_si_share.html"/>
    <id>http://mmmmmm.me/hexo_si_share.html</id>
    <published>2018-12-18T12:18:00.000Z</published>
    <updated>2019-01-27T10:08:57.588Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_7.png"></p><blockquote><ul><li>关于next主题中加入自己喜欢的分享样式的文章，让你的博客如星空般璀璨。</li></ul></blockquote><a id="more"></a><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>之前一直用的addthis或者百度分享，可是加入pjax后失效，相应的接口重写也不行，故自己重新加一个分享的功能。</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h2 id="引入资源："><a href="#引入资源：" class="headerlink" title="引入资源："></a>引入资源：</h2><p><img alt="upload successful" data-original="/images/my_blog_20.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $config = &#123;</span><br><span class="line">  sites : [<span class="string">'weibo'</span>,<span class="string">'qq'</span>, <span class="string">'wechat'</span>,<span class="string">'tencent'</span>,<span class="string">'qzone'</span>,<span class="string">'douban'</span>, <span class="string">'facebook'</span>,  <span class="string">'google'</span>,<span class="string">'twitter'</span>],</span><br><span class="line">  disabled: [ <span class="string">'linkedin'</span>, <span class="string">'diandian'</span>],</span><br><span class="line">  wechatQrcodeTitle: <span class="string">"微信扫一扫"</span>,</span><br><span class="line">  wechatQrcodeHelper: <span class="string">'&lt;p&gt;微信扫一扫，右上角分享&lt;/p&gt;'</span>,</span><br><span class="line">  source: <span class="string">'Leesin Dong'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">'.post-spread'</span>).share($config);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjaxshare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  $(<span class="string">'.post-spread'</span>).share($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键的一步"><a href="#关键的一步" class="headerlink" title="关键的一步"></a>关键的一步</h2><p>很多时候出现：</p><p><img alt="upload successful" data-original="/images/my_blog_21.png"><br>这是什么鬼？<br>下载网上的demo发现了问题。缺少雪碧图把？（猜想）<br>通过对比，需要引入demo中的fonts目录。</p><p><img alt="upload successful" data-original="/images/my_blog_22.png"></p><h2 id="附：方便学习的小demo"><a href="#附：方便学习的小demo" class="headerlink" title="附：方便学习的小demo"></a>附：方便学习的小demo</h2><p><a href="https://github.com/overtrue/share.js/zipball/master" target="_blank" rel="noopener">https://github.com/overtrue/share.js/zipball/master</a></p><h2 id="一次成功后还出现上面的bug"><a href="#一次成功后还出现上面的bug" class="headerlink" title="一次成功后还出现上面的bug"></a>一次成功后还出现上面的bug</h2><p>将fonts目录删掉，重新导入</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><h1 id="2018-12-23发现bug（读者可忽略）"><a href="#2018-12-23发现bug（读者可忽略）" class="headerlink" title="2018.12.23发现bug（读者可忽略）"></a>2018.12.23发现bug（读者可忽略）</h1><p>里面的图标变成了灰色，因为在护眼的js中对a标签的颜色进行了重新定义，加a:not()</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_7.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;关于next主题中加入自己喜欢的分享样式的文章，让你的博客如星空般璀璨。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(三)，引入require.js,适配pjax</title>
    <link href="http://mmmmmm.me/hexo_san_require.html"/>
    <id>http://mmmmmm.me/hexo_san_require.html</id>
    <published>2018-12-18T12:16:00.000Z</published>
    <updated>2019-01-27T10:08:03.916Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_8.png"></p><blockquote><ul><li>一篇关于next主题中加入require.js的文章，让你的文章如闪电般迅捷。</li></ul></blockquote><a id="more"></a><h1 id="require-js的好处，"><a href="#require-js的好处，" class="headerlink" title="require.js的好处，"></a>require.js的好处，</h1><p>总结一下就是：</p><ol><li>减少js文件之间的依赖关系</li><li>能够在页面呈现出来之后再加载js css等，提升系统性能</li><li>异步，跟第二步一个意思<h1 id="hexo-next中加入require-js"><a href="#hexo-next中加入require-js" class="headerlink" title="hexo next中加入require.js"></a>hexo next中加入require.js</h1><h2 id="新建一个main-js作为所有js的入口"><a href="#新建一个main-js作为所有js的入口" class="headerlink" title="新建一个main.js作为所有js的入口"></a>新建一个main.js作为所有js的入口</h2>这个我是用来加载首页的js的，因为加入了pjax<br>下面会弄pjax<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="selector-tag">require</span><span class="selector-class">.config</span>(&#123;</span><br><span class="line">  <span class="attribute">paths</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"music"</span>: <span class="string">"/dist/music"</span>,</span><br><span class="line">    <span class="string">"aplayer"</span>: <span class="string">"/js/src/aplayer"</span>,</span><br><span class="line">    <span class="string">"backgroudLine"</span>: <span class="string">"/js/src/backgroudLine"</span>,</span><br><span class="line">    <span class="string">"category"</span>: <span class="string">"/js/src/category"</span>,</span><br><span class="line">    <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">    <span class="string">"share"</span>:<span class="string">"/js/src/pjax/share"</span>,</span><br><span class="line">    <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//为了动态的增加css，require js中并没有这个功能，github上有相关的插件和文档，自行google</span></span><br><span class="line">  <span class="attribute">shim</span>: &#123;</span><br><span class="line">    <span class="string">'share'</span>: &#123;</span><br><span class="line">      <span class="attribute">deps</span>: [</span><br><span class="line">        <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="selector-tag">require</span>([<span class="string">'backgroudLine'</span>,<span class="string">'music'</span>,<span class="string">'aplayer'</span>,<span class="string">'category'</span>,<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>], function ()&#123;</span><br><span class="line"> <span class="selector-tag">pjaxshare</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>_layout.swig<br></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;#<span class="name">require</span>主函数#&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> <span class="attr">data-main</span>=<span class="string">"/js/src/pjax/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>网上说必须在相应的js文件中用define包住类似于<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">原来的js</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>可是我发现并不用呀</p><h2 id="pjax的require-js实现"><a href="#pjax的require-js实现" class="headerlink" title="pjax的require.js实现"></a>pjax的require.js实现</h2><p>_layout.swig<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/jquer_min_js.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/jquery_pjax_min_js.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/pjaxMain.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>pjaxmain.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).pjax(<span class="string">'a[target!=_blank]'</span>, <span class="string">'#pjax-container'</span>, &#123;</span><br><span class="line">  fragment: <span class="string">'#pjax-container'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//用户通过浏览器的前进后退按钮，需要加载的js</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'popstate.pjax'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*原来不行后来加到complete中行了，后来又不行了*/</span></span><br><span class="line">    pjax();</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:start'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:complete'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>.config(&#123;</span><br><span class="line">      paths: &#123;</span><br><span class="line">        <span class="comment">// "category_js": "/js/src/pjax/category_js",</span></span><br><span class="line">        <span class="comment">// "opacity_js":"/js/src/pjax/opacity_js",</span></span><br><span class="line">        <span class="comment">// "motion_js":"/js/src/pjax/motion_js",</span></span><br><span class="line">        <span class="comment">// "scrollspy_js":"/js/src/pjax/scrollspy_js",</span></span><br><span class="line">        <span class="comment">// "post-details_js":"/js/src/pjax/post-details_js",</span></span><br><span class="line">        <span class="comment">// "lean_analytics":"/js/src/pjax/lean_analytics",</span></span><br><span class="line">        <span class="comment">// "baidutuisong":"/js/src/pjax/baidutuisong",</span></span><br><span class="line">        <span class="comment">// "utils_js":"/js/src/pjax/utils_js",</span></span><br><span class="line">        <span class="comment">//这个是单独的</span></span><br><span class="line">        <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">        <span class="comment">// "share":"/js/src/pjax/share",</span></span><br><span class="line">        <span class="comment">//这个也是单独的</span></span><br><span class="line">        <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span>,</span><br><span class="line">        <span class="string">"pjax_function_public"</span>:<span class="string">"/js/src/pjax/pjax_function_public"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      shim: &#123;</span><br><span class="line">        <span class="string">'share'</span>: &#123;</span><br><span class="line">          deps: [</span><br><span class="line">            <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>,<span class="string">'pjax_function_public'</span></span><br><span class="line">    ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pjax();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*因为下面的postdetails_js中的有个判断空指针的，如果加上就不能左移，如果去掉会报错，所以把这个放在首行来执行。*/</span></span><br><span class="line">  <span class="comment">/*现在已经解决,可以放在任意的位置*/</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      之前一直是好的突然有次就不好了，后来解决了右边sidebar滚轮效果消失的效果之后，突然又好了。</span></span><br><span class="line"><span class="comment">      原因是因为，之前放在detail js的下面，而detail的下面undfind的判断时报错的，所以不会往下走。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">/*判断#lv-container是否为空，目前这是我找到最好的办法，因为不判断，进入首页或其他的页面会空指针异常。*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">"#lv-container"</span>).length &gt; <span class="number">0</span> &amp;&amp;$(<span class="string">'comments'</span>).length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">".comments"</span>).css(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    $.getScript(<span class="string">"https://cdn-city.livere.com/js/embed.dist.js"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//不蒜子js</span></span><br><span class="line">  $.getScript(<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//自己写的分享</span></span><br><span class="line">  pjaxshare();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类的js</span></span><br><span class="line">  category_js();</span><br><span class="line"><span class="comment">// 局部刷新后文章内容不显示bug的js</span></span><br><span class="line">  opacity_js()</span><br><span class="line"><span class="comment">//点击有目录的文章sidebar不显示的bug解决</span></span><br><span class="line">  motion_js()</span><br><span class="line">  scrollspy_js()</span><br><span class="line">  <span class="comment">//utils_js()</span></span><br><span class="line">  postdetails_js()</span><br><span class="line"><span class="comment">//lean数量统计的js，原来的js是在themes/next/layout/_third-party/analytics/lean-analytics.swig文件中</span></span><br><span class="line">  lean_analytics();</span><br><span class="line">  <span class="comment">//百度推送js</span></span><br><span class="line">  baidutuisong();</span><br><span class="line"><span class="comment">//     //右边sidebar滚轮效果消失了。</span></span><br><span class="line">  initSidebarDimension()</span><br><span class="line">  <span class="comment">//懒加载</span></span><br><span class="line">  lazyLoad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="关于require-js适配过程中报的错误"><a href="#关于require-js适配过程中报的错误" class="headerlink" title="关于require js适配过程中报的错误"></a>关于require js适配过程中报的错误</h1><h2 id="aplayer-min-js只能在——lauout加载"><a href="#aplayer-min-js只能在——lauout加载" class="headerlink" title="aplayer.min.js只能在——lauout加载"></a>aplayer.min.js只能在——lauout加载</h2><p>这个只能通过这里加载，因为RequireJS 介绍说一个JS文件里只能放一个Define，这个众所周知，不提</p><h2 id="一直报错：MISMATCHED-ANONYMOUS-DEFINE-MODULES-…"><a href="#一直报错：MISMATCHED-ANONYMOUS-DEFINE-MODULES-…" class="headerlink" title="一直报错：MISMATCHED ANONYMOUS DEFINE() MODULES …"></a>一直报错：MISMATCHED ANONYMOUS DEFINE() MODULES …</h2><p>解决：<a href="https://blog.csdn.net/u011558902/article/details/53691627" target="_blank" rel="noopener">https://blog.csdn.net/u011558902/article/details/53691627</a></p><p>pjaxrequire 解决<br>require（[xxxxxxx]fuction（）{<br>pjax<br>}）</p><h2 id="在博客中加requre-js时候，关于aplayer的插件需要。"><a href="#在博客中加requre-js时候，关于aplayer的插件需要。" class="headerlink" title="在博客中加requre.js时候，关于aplayer的插件需要。"></a>在博客中加requre.js时候，关于aplayer的插件需要。</h2><p>define aplayer 可是里面还有一个define定义APlayer函数（重点记录 RequireJS 介绍说一个JS文件里只能放一个Define，这个众所周知，不提。）<br>解决方法：因为RequireJS 介绍说一个JS文件里只能放一个Define，这个众所周知，不提。，只能将这个插件不通过require来进行加载。让系统上来就加载。</p><h2 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h2><p><img alt="upload successful" data-original="/images/my_blog_12.png"><br>这是因为我的apler 的js在requer和——layout中都进行了定义</p><h2 id="velocity函数报错"><a href="#velocity函数报错" class="headerlink" title="velocity函数报错"></a>velocity函数报错</h2><p><img alt="upload successful" data-original="/images/my_blog_13.png"><br>解决：jquery从require中去掉，原因不详，好像有什么循环依赖。<br>解决：jquery从require中去掉，原因不详，好像有什么循环依赖。</p><h2 id="针对pjax的require，我用这个requre主要就是来安排pjax的，因为要之前吧pjax的函数在家在一边，浪费很大的加载时间"><a href="#针对pjax的require，我用这个requre主要就是来安排pjax的，因为要之前吧pjax的函数在家在一边，浪费很大的加载时间" class="headerlink" title="针对pjax的require，我用这个requre主要就是来安排pjax的，因为要之前吧pjax的函数在家在一边，浪费很大的加载时间"></a>针对pjax的require，我用这个requre主要就是来安排pjax的，因为要之前吧pjax的函数在家在一边，浪费很大的加载时间</h2><p>发现：<br>我很多模块并没有用define进行定定义,但是仍然成功了，说明并不是一定要define定义才能用的。（我通过实际经验总结的，结论不一定正确，有不对的地方还请指出）<br>解决：<br><img alt="upload successful" data-original="/images/my_blog_14.png"><br><img alt="upload successful" data-original="/images/my_blog_15.png"></p><p>在pjaxmin里面写require的东西，可以发现我并没有在——类中写</p><p>并没有按照require的方式引入pjaxmain这个函数，但还是成功了，<br>说明，项目中只需要引入一次require这个js，便可以处处使用（目前根据我的实际操作得出的结论，不一定正确。）</p><p>这样的话，每次pjax 的complite的函数执行完了之后才会加载需要的函数，也就是在首页，或者其他的页面，是不需要加载这个些个文件的，在首页的首次加载中大大节省了时间完美！！！！！</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p><img alt="upload successful" data-original="/images/my_blog_16.png"></p><p>官方解释</p><p><img alt="upload successful" data-original="/images/my_blog_17.png"><br>这里的脚本错误并不是我们引入的js脚本错误，而是对编写的config require函数的脚本错误，<br>比如我就是路径不会的</p><h2 id="pajx-返回失效"><a href="#pajx-返回失效" class="headerlink" title="pajx 返回失效"></a>pajx 返回失效</h2><p>$(window).on(‘popstate.pjax’, function () {<br>$(‘img’).lazyload({<br>placeholder: ‘/images/loading.gif’,<br>effect: ‘fadeIn’,<br>threshold : 100,<br>failure_limit : 20,<br>skip_invisible : false<br>});</p><pre><code>pjax();</code></pre><p>})<br>和complite同样的代码，通过打断点，发现我的if（xxx&gt;0）{}并没有执行，说明是在页面加载完之前就开始执行这段代码了，<br>解决：<br>$(window).on(‘popstate.pjax’, function () {<br>$(document).on(‘pjax:complete’,<br>function () {<br>//<br>$(‘img’).lazyload({<br>placeholder: ‘/images/loading.gif’,<br>effect: ‘fadeIn’,<br>threshold : 100,<br>failure_limit : 20,<br>skip_invisible : false<br>});</p><pre><code>  pjax();})</code></pre><p>})</p><p>在之前加入，<br>$(document).on(‘pjax:complete’,）<br>意思是在pjax请求加载完了之后再进行如下的代码。</p><h2 id="pjaxshare函数（分享函数）老师报错pajaxshare（）-not-defined"><a href="#pjaxshare函数（分享函数）老师报错pajaxshare（）-not-defined" class="headerlink" title="pjaxshare函数（分享函数）老师报错pajaxshare（） not defined"></a>pjaxshare函数（分享函数）老师报错pajaxshare（） not defined</h2><p>解决：想着在pjaxshare函数上面加define（function（）{}）,按照网上的教程是这样的，可是我加上就是不行，去掉反而行了。</p><h2 id="require-css"><a href="#require-css" class="headerlink" title="require css"></a>require css</h2><p>从github上下载<br>deps:[‘css!libs/css/color.min’] 这里会优先加在css这个模块名下的文件(libs/js/css.min.js) 然后一个 “!”后面紧接着在基目录下加在libs/css/color.min.css<br>所以css.js文件下载下拉是不能改名的</p><p><img alt="upload successful" data-original="/images/my_blog_19.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_8.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于next主题中加入require.js的文章，让你的文章如闪电般迅捷。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(二)，懒加载</title>
    <link href="http://mmmmmm.me/hexo_er_lazy.html"/>
    <id>http://mmmmmm.me/hexo_er_lazy.html</id>
    <published>2018-12-18T12:15:00.000Z</published>
    <updated>2019-01-27T10:21:31.690Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_26.png"></p><blockquote><ul><li>关于next注意中加入懒加载机制的文章，让你的博客如丝般顺滑。</li></ul></blockquote><a id="more"></a><h1 id="tip：没有耐心的可以直接看：正式在hexo-next中加入懒加载（最下面）"><a href="#tip：没有耐心的可以直接看：正式在hexo-next中加入懒加载（最下面）" class="headerlink" title="tip：没有耐心的可以直接看：正式在hexo next中加入懒加载（最下面）"></a>tip：没有耐心的可以直接看：正式在hexo next中加入懒加载（最下面）</h1><h1 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h1><p>本来想全部优化完，一起写博客的，大半夜的也不想太累，可是可能因为年纪大了吧（23了），怕隔天给忘记了，到时候回头找错误岂不是浪费更多的时间，索性，今天拖着疲惫的大脑，写下这篇博文吧~</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本人的博客mmmmmm.me （目前可能还是问题很多的，不介意的可以稍微看一下） pjax基本优化完了，目前我涉及到的，现在想优化一下网站的加载速度，因为我的网站刚进去的时候白屏大半天，然后浏览器的转盘转半天，（就是刷新那个标识了，不会表达），之后就是一堆查看通过浏览器的审查模式看network，发现首页的大图片占了很久的响应时间，之后发现我的hexo后台管理工具，hexo-admin（一个很方便的博客发布工具，有兴趣的看我另一篇博客，网上一搜一大堆），每次直接复制粘贴进去，它默认保存的是png格式的，关于jpg和png的区别，希望大家也了解一下，使得我的图片好几兆，我就手动复制成jpg格式的，但是还是不行的呀，这个时候，就上网查各种优化，发现，有个懒加载这个东东，客观往下看。</p><h1 id="懒加载简单介绍"><a href="#懒加载简单介绍" class="headerlink" title="懒加载简单介绍"></a>懒加载简单介绍</h1><blockquote><p>何为懒加载，简言之就是在html加载的时候，若果img标签的src是有内容的，在加载的过程中，img标签就回去请求这个图片，知道加载完，我们的浏览器的刷新那个图标才会停止转动，也就是才算请求玩，这个时候懒加载就应运而生。懒加载能够在你鼠标不懂得时候只加载目前电脑窗口内需要展示的图片，电脑屏幕内部需要展示的图片就暂时不加载，对于图片比较多的网站是不是很实用呢？</p></blockquote><p>关于懒加载的语法简单介绍一下：</p><h2 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a>引入js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"jquery.lazyload.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="重点！敲黑板了！！！"><a href="#重点！敲黑板了！！！" class="headerlink" title="重点！敲黑板了！！！"></a>重点！敲黑板了！！！</h2><p>修改图片属性（增加data-original属性，去掉src属性）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img alt=<span class="string">""</span> width=<span class="string">"640"</span> height=<span class="string">"480"</span> data-original=<span class="string">"img/example.jpg"</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="完善懒加载函数"><a href="#完善懒加载函数" class="headerlink" title="完善懒加载函数"></a>完善懒加载函数</h2><pre><code>&lt;script&gt;$(function() {    $(&quot;img&quot;).lazyload();});&lt;script&gt;</code></pre><h2 id="懒加载函数可配置的参数"><a href="#懒加载函数可配置的参数" class="headerlink" title="懒加载函数可配置的参数"></a>懒加载函数可配置的参数</h2><p>备注：这里必须设置图片的width和height,否则插件可能无法正常工作。</p><p>上面是最简单的调用，但是一般而言，我们还有一些特殊的需求，比如想要提前一点点加载，避免网络过慢时加载缓慢，加载隐藏图片等等，lazyload都为我们提供相应的参数。</p><p>1.设置临界点</p><p>默认情况下图片会出现在屏幕时加载. 如果你想提前加载图片, 可以设置threshold 选项, 如：设置 threshold 为 200 令图片在距离屏幕 200 像素时提前加载.</p><pre><code>$(&quot;img&quot;).lazyload({    threshold : 200});</code></pre><p>2.使用特效</p><p>默认情况下，图像完全加载并调用show()。你可以使用任何你想要的效果。下面的代码使用fadeIn （淡入效果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).lazyload(&#123;</span><br><span class="line">    effect : <span class="string">"fadeIn"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.当图片不连续时</p><p>滚动页面的时候, Lazy Load 会循环为加载的图片. 在循环中检测图片是否在可视区域内. 默认情况下在找到第一张不在可见区域的图片时停止循环. 图片被认为是流式分布的, 图片在页面中的次序和 HTML 代码中次序相同. 但是在一些布局中, 这样的假设是不成立的. 不过你可以通过 failurelimit 选项来控制加载行为.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).lazyload(&#123;</span><br><span class="line">    failure_limit : <span class="number">20</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>将 failurelimit 设为 20 ，当插件找到 20 个不在可见区域的图片时停止搜索.</p><p>4.加载隐藏图片</p><p>当界面有很多隐藏图片的时候并希望加载他们的时候则使用kip_invisible 属性，将其设置为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).lazyload(&#123; </span><br><span class="line">     skip_invisible : <span class="literal">false</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>到这里，上面的方法已经基本满足常规的懒加载使用了，还有特殊的使用，可查看官网API。</p><h1 id="正式在hexo-next中加入懒加载"><a href="#正式在hexo-next中加入懒加载" class="headerlink" title="正式在hexo next中加入懒加载"></a>正式在hexo next中加入懒加载</h1><p>之前尝试过很多方法：</p><h2 id="1："><a href="#1：" class="headerlink" title="1："></a>1：</h2><p>如上查看相关的懒加载api文档，自定义懒加载函数，但是忽略了，img中需要data-original，并且去掉src属性，之后发现然后弥补，想要通过js的方式动态的给我的img加入这个属性，然后去掉src属性，但是js加入的前提是加载完dom模型，加载完dom模型的前提是src中的内容已经加载了，所以是不行的，故尝试修改html，next主题中没有html事swig文件，img中的内容是通过js渲染出来的。故放弃。</p><h2 id="2："><a href="#2：" class="headerlink" title="2："></a>2：</h2><p>上谷歌查看，发现可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span><br></pre></td></tr></table></figure><p>然后修改_config.yml文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">     enable: <span class="literal">true</span></span><br><span class="line">     # className: #可选 e.g. .J-lazyload-img</span><br><span class="line">     # loadingImg: #可选 eg. ./images/loading.png</span><br></pre></td></tr></table></figure><p>可是我发现貌似是不行的，反正报各种错，网上好像是有人成功的。这个方法待定，附上原博客地址，感兴趣的可以研究。<br><a href="http://www.zhaojun.im/hexo-lazyload/" target="_blank" rel="noopener">http://www.zhaojun.im/hexo-lazyload/</a></p><h2 id="3：按我的步骤来，不要问为什么。"><a href="#3：按我的步骤来，不要问为什么。" class="headerlink" title="3：按我的步骤来，不要问为什么。"></a>3：按我的步骤来，不要问为什么。</h2><p>我自己成功的方法：<br>在主题文件夹下的scripts文件夹里，写一个 js 文件，名字不限，xxxx.js,比如wohaoshuai.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use strict<span class="string">';</span></span><br><span class="line"><span class="string">var cheerio = require('</span>cheerio<span class="string">'); </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">function lazyloadImg(source) &#123;</span></span><br><span class="line"><span class="string">    var LZ= cheerio.load(source, &#123;</span></span><br><span class="line"><span class="string">        decodeEntities: false</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    //遍历所有 img 标签，添加data-original属性</span></span><br><span class="line"><span class="string">    LZ('</span>img<span class="string">').each(function(index, element) &#123;</span></span><br><span class="line"><span class="string">        var oldsrc = LZ(element).attr('</span>src<span class="string">');</span></span><br><span class="line"><span class="string">        if (oldsrc) &#123;</span></span><br><span class="line"><span class="string">            LZ(element).removeAttr('</span>src<span class="string">');</span></span><br><span class="line"><span class="string">            LZ(element).attr(&#123;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                 '</span>data-original<span class="string">': oldsrc</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    return LZ.html();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//在渲染之前，更改 img 标签</span></span><br><span class="line"><span class="string">hexo.extend.filter.register('</span>after_render:html<span class="string">', lazyloadImg);</span></span><br></pre></td></tr></table></figure><p>然后网上是说在header或者footer中引入js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://libs.baidu.com/jquery/1.11.1/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="comment">//也可替换其他的lazyload源</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://apps.bdimg.com/libs/jquery-lazyload/1.9.5/jquery.lazyload.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">      <span class="comment">//对所有 img 标签进行懒加载        </span></span><br><span class="line">          $(<span class="string">"img"</span>).lazyload(&#123;</span><br><span class="line">          <span class="comment">//设置占位图，我这里选用了一个 loading 的加载动画</span></span><br><span class="line">            placeholder:<span class="string">"/img/loading.gif"</span>,</span><br><span class="line">            <span class="comment">//加载效果</span></span><br><span class="line">              effect:<span class="string">"fadeIn"</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>但是我发现hexo next主题中有个themes/next/source/js/src/utils.js文件。<br>找到这个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lazyLoadPostsImages: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// $('#posts').find('img').lazyload(&#123;</span></span><br><span class="line">      <span class="comment">//   placeholder: '/images/loading.gif',</span></span><br><span class="line">      <span class="comment">//   effect: 'fadeIn',</span></span><br><span class="line">      <span class="comment">//   threshold : 0</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      $(<span class="string">'img'</span>).lazyload(&#123;</span><br><span class="line">         placeholder: <span class="string">'/images/loading.gif'</span>,</span><br><span class="line">        effect: <span class="string">'fadeIn'</span>,</span><br><span class="line">        threshold : <span class="number">100</span>,</span><br><span class="line">        failure_limit : <span class="number">20</span>,</span><br><span class="line">        skip_invisible : <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>修改内容即可，之前是注释掉的内容，意思是只对article中的内容进行懒加载，可是我需要的是全局的都懒加载，因为上面的scripts中的js已经将全局的img都替换了标签内容，不全局懒加载的话会有的不显示，<br>然后就是这两个配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">threshold : <span class="number">100</span>,</span><br><span class="line"> ailure_limit : <span class="number">20</span>,</span><br></pre></td></tr></table></figure><p>意思上面有关懒加载的说的很清楚了，为了解决有的图片可能会不显示。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_26.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;关于next注意中加入懒加载机制的文章，让你的博客如丝般顺滑。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题深度优化(一)，加入pjax功能</title>
    <link href="http://mmmmmm.me/hexo_yi_pjax.html"/>
    <id>http://mmmmmm.me/hexo_yi_pjax.html</id>
    <published>2018-12-18T11:20:00.000Z</published>
    <updated>2019-01-28T05:44:41.363Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_10.png"></p><blockquote><ul><li>一篇关于在next主题中加入pjax的文章，让你的文章如钻石般夺目。</li></ul></blockquote><a id="more"></a><p>特别声明：<br><strong>看不懂没关系，往下读，因为我写的逻辑可能不是很清晰~<br>本人源码在github上实在不懂的 git clone自己扣一扣，github在博客中有连接<br>本人博客mmmmmm.me</strong></p><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>我有强迫症，遇到好的东西就想给自己整上去，在这里想忠诚的奉劝大家一句，不要再搭建自己的博客了，这是一个无底洞，就跟打游戏一样，当你到达六十级之后，你发现版本更新了，顶级变成了八十级，而且，目前看来你自己只有三级，只是自己感觉自己是六十级<del>~~ 就像我，这个东西我足足花了一周多，当然也有我经常加班的原因吧，好了不吐槽了</del></p><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><h2 id="pjax初体验–instantclick"><a href="#pjax初体验–instantclick" class="headerlink" title="pjax初体验–instantclick"></a>pjax初体验–instantclick</h2><p>首先本人加了一个不蒜子的群，看到有人说instantclick能够实现自己的博客实现不中断的播放（大家都知道博客一刷新，一换页，播放的歌曲插件肯定也会刷新，歌也就断了），看到这里是不是有感觉了~~，这个时候我就开始拼命的往里面加，大概花了两天放弃了，可是无奈中文文档也比较少，而且，bug巨多，最大的原因也是bug巨多，适配起来十分麻烦，比如多说评论系统等等。但是速度确实蛮快的，因为可以1鼠标放到标签上实现预加载2鼠标点下去的瞬间实现预加载，而且可以自己设定预加载的时间。（好像是这么回事，时间太久远了）<br>下面贴出我找到的几个教程，对于bug多这点不介意，喜欢钻研的同学可以看看：<br><a href="https://www.ihewro.com/archives/515/" target="_blank" rel="noopener">https://www.ihewro.com/archives/515/</a><br><a href="https://qqdie.com/archives/instantclick.html" target="_blank" rel="noopener">https://qqdie.com/archives/instantclick.html</a><br><a href="https://www.jianshu.com/p/c306360e4270" target="_blank" rel="noopener">https://www.jianshu.com/p/c306360e4270</a><br><a href="https://www.songhaifeng.com/razt/32.html" target="_blank" rel="noopener">https://www.songhaifeng.com/razt/32.html</a><br>好了就先这么多，google上也有好多，赶紧让我们进入正题吧~</p><h2 id="真正的pjax"><a href="#真正的pjax" class="headerlink" title="真正的pjax"></a>真正的pjax</h2><p>官方介绍：pushState + ajax = pjax 带来最直观的效果是整个网站变成单页应用。这样的效果将会极大的提升用户体验，并且可以减少https的请求的次数和内容。使用github上面的一个开源项目defunkt/jquery-pjax 可以很轻松的帮助我们实现pjax。</p><p>这样可以实现，刷新的时候只加载局部的html和css js 大大加快速度。<br>真诚提醒：如果对前端一点点基础都没有的话，要不就放弃吧。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>找到theme-&gt;next-&gt;layout-&gt;_layout.swig文件<br>在开头加入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery.pjax/2.0.1/jquery.pjax.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/pjax/pjaxBase.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>解释一下：前两行是引入jq文件和pjax的js文件，jq文件必须在pjax文件前面引入，第三行是引入我自己的文件，这个文件是我自己diy的目录如图。在第二行下面<script></script>中间加入内容是一样的效果。</p></blockquote><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>还是在这个文件中在底部加入</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;# 在这里依次加载<span class="name">pjax</span>需要的js文件 #&#125;</span><span class="xml">//swig文件中的注释是这样子的</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/category_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/opacity_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/motion_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/velocity.ui_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/velocity_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/bootstrap_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/scrollspy_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/utils_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>   <span class="attr">src</span>=<span class="string">"/js/src/pjax/post-details_js.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意这里的文件是有顺序的，具体的我会在下文详细讲述。</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>第二步中的这些文件都是我自己加入的，原因是因为（划重点了！！！）<br><strong>在pjax中是局部刷新的也就是局部加载的，而以上的文件，next主题中本身是没有的，原来的文件名称没有我的_js后缀，在目录next-&gt;source-&gt;js-&gt;src下面，<br>源文件大部分都是$(document).ready()的，这个函数，大家可以上网好好查查，是加载完整个dom结构后进行加载的，当然了和js中的Window.onload是不一样的，后者是在图片等全部加载完之后才会加载js，好了不闲扯了，注意将这些文件复制到我上面的目录下并且重命名例如：/js/src/pjax/bootstrap_js.js然后将所有的文件都把$(document).ready()去掉，然后用function xxx包住，这样就可以外部调用了，我会在下面讲到，很有用哦。</strong></p><blockquote><p>为什么这么麻烦，因为next的js是相互调用的，本人比较懒，实在没有时间阅读全部的源码。</p></blockquote><p>目录：</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p><img alt="upload successful" data-original="/images/my_blog_11.png"></p><p>如上面的目录，这些有的是我复制的系统核心的，因为在p我单独还建了一个/js/src/pjax/pjaxBase.js，你可能就懂了第一步了。这个js是pjax的核心，下面贴出源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define(['jquery','jquery_pjax_min_js'],function () &#123;</span></span><br><span class="line">$(<span class="built_in">document</span>).pjax(<span class="string">'a[target!=_blank]'</span>, <span class="string">'#pjax-container'</span>, &#123;</span><br><span class="line">  fragment: <span class="string">'#pjax-container'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//用户通过浏览器的前进后退按钮，需要加载的js</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'popstate.pjax'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">document</span>).on(<span class="string">'pjax:complete'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">'img'</span>).lazyload(&#123;</span><br><span class="line">        placeholder: <span class="string">'/images/loading.gif'</span>,</span><br><span class="line">        effect: <span class="string">'fadeIn'</span>,</span><br><span class="line">        threshold : <span class="number">100</span>,</span><br><span class="line">        failure_limit : <span class="number">20</span>,</span><br><span class="line">        skip_invisible : <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">      pjax();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:start'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:complete'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>.config(&#123;</span><br><span class="line">      paths: &#123;</span><br><span class="line">      <span class="comment">//下面注释的这几个js是之前的版本，因为给主题加入了require.js提升性能，所以将他们整合到了下面pjax_function_public文件中，效果是一样的。</span></span><br><span class="line">        <span class="comment">// "category_js": "/js/src/pjax/category_js",</span></span><br><span class="line">        <span class="comment">// "opacity_js":"/js/src/pjax/opacity_js",</span></span><br><span class="line">        <span class="comment">// "motion_js":"/js/src/pjax/motion_js",</span></span><br><span class="line">        <span class="comment">// "scrollspy_js":"/js/src/pjax/scrollspy_js",</span></span><br><span class="line">        <span class="comment">// "post-details_js":"/js/src/pjax/post-details_js",</span></span><br><span class="line">        <span class="comment">// "lean_analytics":"/js/src/pjax/lean_analytics",</span></span><br><span class="line">        <span class="comment">// "baidutuisong":"/js/src/pjax/baidutuisong",</span></span><br><span class="line">        <span class="comment">// "utils_js":"/js/src/pjax/utils_js",</span></span><br><span class="line">        <span class="comment">//这个是单独的</span></span><br><span class="line">        <span class="string">"jquery.share.min"</span>:<span class="string">"/js/src/pjax/share/jquery.share.min"</span>,</span><br><span class="line">        <span class="comment">// "share":"/js/src/pjax/share",</span></span><br><span class="line">        <span class="comment">//这个也是单独的</span></span><br><span class="line">        <span class="string">"css"</span>:<span class="string">"/js/src/pjax/css"</span>,</span><br><span class="line">        <span class="comment">//我将上面注释的内容整合到了这个js中，为了更好的提升性能，因为虽然一样的内容，多次读取文件，和读一个文件，效率还是有很大的差距的。</span></span><br><span class="line">        <span class="string">"pjax_function_public"</span>:<span class="string">"/js/src/pjax/pjax_function_public"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      shim: &#123;</span><br><span class="line">        <span class="string">'share'</span>: &#123;</span><br><span class="line">          deps: [</span><br><span class="line">            <span class="string">'css!/js/src/pjax/share/share.min'</span>,<span class="string">'jquery.share.min'</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'jquery.share.min'</span>,<span class="string">'share'</span>,<span class="string">'css'</span>,<span class="string">'pjax_function_public'</span></span><br><span class="line">    ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'img'</span>).lazyload(&#123;</span><br><span class="line">          placeholder: <span class="string">'/images/loading.gif'</span>,</span><br><span class="line">          effect: <span class="string">'fadeIn'</span>,</span><br><span class="line">          threshold : <span class="number">100</span>,</span><br><span class="line">          failure_limit : <span class="number">20</span>,</span><br><span class="line">          skip_invisible : <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      pjax();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*因为下面的postdetails_js中的有个判断空指针的，如果加上就不能左移，如果去掉会报错，所以把这个放在首行来执行。*/</span></span><br><span class="line">  <span class="comment">/*现在已经解决,可以放在任意的位置*/</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      之前一直是好的突然有次就不好了，后来解决了右边sidebar滚轮效果消失的效果之后，突然又好了。</span></span><br><span class="line"><span class="comment">      原因是因为，之前放在detail js的下面，而detail的下面undfind的判断时报错的，所以不会往下走。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">/*判断#lv-container是否为空，目前这是我找到最好的办法，因为不判断，进入首页或其他的页面会空指针异常。*/</span></span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">"#lv-container"</span>).length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    $(<span class="string">".comments"</span>).css(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    $.getScript(<span class="string">"https://cdn-city.livere.com/js/embed.dist.js"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//不蒜子js</span></span><br><span class="line">  $.getScript(<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//自己写的分享</span></span><br><span class="line">  pjaxshare();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类的js</span></span><br><span class="line">  category_js();</span><br><span class="line"><span class="comment">// 局部刷新后文章内容不显示bug的js</span></span><br><span class="line">  opacity_js()</span><br><span class="line"><span class="comment">//点击有目录的文章sidebar不显示的bug解决</span></span><br><span class="line">  motion_js()</span><br><span class="line">  scrollspy_js()</span><br><span class="line">  <span class="comment">//utils_js()</span></span><br><span class="line">  postdetails_js()</span><br><span class="line"><span class="comment">//lean数量统计的js，原来的js是在themes/next/layout/_third-party/analytics/lean-analytics.swig文件中</span></span><br><span class="line">  lean_analytics();</span><br><span class="line">  <span class="comment">//百度推送js</span></span><br><span class="line">  baidutuisong();</span><br><span class="line"><span class="comment">//     //右边sidebar滚轮效果消失了。</span></span><br><span class="line">  initSidebarDimension()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下：<br>$(document).pjax(‘a[target!=_blank]’ ‘#main’, {<br>fragment: ‘#main’,<br>timeout: 5000,<br>});<br>这个函数是pjax的核心，<br>‘a[target!=_blank]’是你将会点击的标签[target!=_blank]，是当你的标签是blank的时候就是需要点击出现一个新的窗口，比如友链之类的，这个时候就不进行局部加载了，没有类似a标签的可以省略。<br>‘#main’是你将会刷新的地方<br>fragment: ‘#main’,是把那个地方的代码刷新然后放到’#main’中<br>timeout，懂js得都懂就不解释了。</p><p>$(document).on(‘pjax:complete’,<br>function() {}<br>划重点了：这个函数是在局部加载完之后自己需要DIY的js，因为pjax是局部加载我已经强调了很多遍了，这个时候有的js会失效比如说评论功能。<br>这个时候引入我们之前定义好的函数。完成！</p><p>贴几个对我很有帮助的博文和hexo next的博客和一个github，实在不懂得可以扒一扒别人的github源码，有很大的帮助。<br><a href="https://www.ihewro.com/archives/354/comment-page-3#comments" target="_blank" rel="noopener">https://www.ihewro.com/archives/354/comment-page-3#comments</a><br><a href="https://www.jimoe.cn/archives/typecho-add-pjax.html" target="_blank" rel="noopener">https://www.jimoe.cn/archives/typecho-add-pjax.html</a><br><a href="http://yelog.org/2017/02/08/pjax/" target="_blank" rel="noopener">http://yelog.org/2017/02/08/pjax/</a><br><a href="https://www.jianshu.com/p/808a647dc324" target="_blank" rel="noopener">https://www.jianshu.com/p/808a647dc324</a><br><a href="https://blog.dyboy.cn/" target="_blank" rel="noopener">https://blog.dyboy.cn/</a><br><a href="https://blog.flysay.com/" target="_blank" rel="noopener">https://blog.flysay.com/</a><br><a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">https://github.com/DIYgod/hexo-theme-sagiri</a><br><a href="http://www.qingpingshan.com/m/view.php?aid=355579" target="_blank" rel="noopener">http://www.qingpingshan.com/m/view.php?aid=355579</a><br><a href="https://diygod.me/" target="_blank" rel="noopener">https://diygod.me/</a><br>中间有个小技巧:chrom的审查元素里面的内容是可以移动和删除的，更利于我们的检查。</p><h1 id="专门基于hexo-next主题的pjax（将丢失的js效果重现）"><a href="#专门基于hexo-next主题的pjax（将丢失的js效果重现）" class="headerlink" title="专门基于hexo next主题的pjax（将丢失的js效果重现）"></a>专门基于hexo next主题的pjax（将丢失的js效果重现）</h1><h2 id="将下面讲到的提取出来"><a href="#将下面讲到的提取出来" class="headerlink" title="将下面讲到的提取出来"></a>将下面讲到的提取出来</h2><p><strong>因为很多事被包装在$(documnent).ready(function(){})里面的，所以pjax不能加载的原因就在这里。自己提取出来，封装成函数自己调用即可</strong><br><strong>下面的需要前端基础，会通过断点进行审查</strong></p><h2 id="点击右边的sidebar，sidebar不出现"><a href="#点击右边的sidebar，sidebar不出现" class="headerlink" title="点击右边的sidebar，sidebar不出现"></a>点击右边的sidebar，sidebar不出现</h2><p>经过阅读源码，点击事件在motion.js中，将相应的代码提取出来<br>motion.js<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">this</span>.toggleEl.on(<span class="string">'click'</span>, <span class="keyword">this</span>.clickHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.dimmerEl.on(<span class="string">'click'</span>, <span class="keyword">this</span>.clickHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.toggleEl.on(<span class="string">'mouseenter'</span>, <span class="keyword">this</span>.mouseEnterHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.toggleEl.on(<span class="string">'mouseleave'</span>, <span class="keyword">this</span>.mouseLeaveHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.on(<span class="string">'touchstart'</span>, <span class="keyword">this</span>.touchstartHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.on(<span class="string">'touchend'</span>, <span class="keyword">this</span>.touchendHandler.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.on(<span class="string">'touchmove'</span>, function(e)&#123;e.preventDefault();&#125;);</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p></p><p>post_detail.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TOC item animation navigate &amp; prevent #item selector in adress bar.</span></span><br><span class="line">  $(<span class="string">'.post-toc a'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> targetSelector = NexT.utils.escapeSelector(<span class="keyword">this</span>.getAttribute(<span class="string">'href'</span>));</span><br><span class="line">    <span class="keyword">var</span> offset = $(targetSelector).offset().top;</span><br><span class="line"></span><br><span class="line">    hasVelocity ?</span><br><span class="line">      html.velocity(<span class="string">'stop'</span>).velocity(<span class="string">'scroll'</span>, &#123;</span><br><span class="line">        offset: offset  + <span class="string">'px'</span>,</span><br><span class="line">        mobileHA: <span class="literal">false</span></span><br><span class="line">      &#125;) :</span><br><span class="line">      $(<span class="string">'html, body'</span>).stop().animate(&#123;</span><br><span class="line">        scrollTop: offset</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p></p><p>这是线索，像java一样点到自己需要的地方，展开逻辑。</p><h3 id="sidebar自动隐藏，自动显示，点击出现，点击隐藏，回到首页，回到中间等操作"><a href="#sidebar自动隐藏，自动显示，点击出现，点击隐藏，回到首页，回到中间等操作" class="headerlink" title="sidebar自动隐藏，自动显示，点击出现，点击隐藏，回到首页，回到中间等操作"></a>sidebar自动隐藏，自动显示，点击出现，点击隐藏，回到首页，回到中间等操作</h3><p>里面如果遇到不认识的函数，可能是hexo自己封装的比如toc，<br>hexo自己的辅助函数：<a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/helpers.html</a><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面这段代码是关于右边的sidebar的js的核心包括：</span></span><br><span class="line"><span class="comment">  自动隐藏，自动显示，点击出现，点击隐藏，回到首页，回到中间等操作*/</span></span><br><span class="line">  <span class="comment">// Expand sidebar on post detail page by default, when post has a toc.</span></span><br><span class="line">  var $tocContent = $(<span class="string">'.post-toc-content'</span>);</span><br><span class="line">  var isSidebarCouldDisplay = CONFIG.sidebar.display === <span class="string">'post'</span> ||</span><br><span class="line">      CONFIG.sidebar.display === <span class="string">'always'</span>;</span><br><span class="line">  var hasTOC = $tocContent.length &gt; <span class="number">0</span> &amp;&amp; $tocContent.html().trim().length &gt; <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isSidebarCouldDisplay &amp;&amp; hasTOC) &#123;</span><br><span class="line"></span><br><span class="line">      NexT.utils.displaySidebar();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*判断this.sidebarEl是否为null，因为从首页进入留言板的时候并没有this.sidebarEl这个属性，回报类似于空指针的异常。</span></span><br><span class="line"><span class="comment"> 下面这个空指针的判断暂时注释掉因为，如果打开的，返回到首页的时候并没有this.sidebarEl，</span></span><br><span class="line"><span class="comment">下面的代码不会进行，下面的，文章在左面没回去的bug就无法得到解决。*/</span></span><br><span class="line"><span class="comment">/*已经将空指针异常的判断打开，因为下面的源码是this.sidebar，这里的this可能并不是element，所以会导致未定义，其实在element中是定义了的</span></span><br><span class="line"><span class="comment">* 在这里将this去掉就解决了*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 下面这段源码在motion.js中的hideSidebar方法。*/</span></span><br><span class="line">    var sidebarEl=$(<span class="string">'.sidebar'</span>)</span><br><span class="line">    <span class="keyword">if</span> (typeof(sidebarEl)!=  <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      NexT.utils.isDesktop() &amp;&amp; $(<span class="string">'body'</span>).velocity(<span class="string">'stop'</span>).velocity(&#123;paddingRight: <span class="number">0</span>&#125;);</span><br><span class="line">      sidebarEl.find(<span class="string">'.motion-element'</span>).velocity(<span class="string">'stop'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">      sidebarEl.velocity(<span class="string">'stop'</span>).velocity(&#123;width: <span class="number">0</span>&#125;, &#123;display: <span class="string">'none'</span>&#125;);</span><br><span class="line">      <span class="comment">/*sidebarToggleLines是在motion js里面的，在这里回报错，在下面进行了引用*/</span></span><br><span class="line">      sidebarToggleLines.init();</span><br><span class="line">      sidebarEl.removeClass(<span class="string">'sidebar-active'</span>);</span><br><span class="line">      sidebarEl.trigger(<span class="string">'sidebar.isHiding'</span>);</span><br><span class="line">      <span class="comment">// Prevent adding TOC to Overview if Overview was selected when close &amp; open sidebar.</span></span><br><span class="line">      <span class="comment">/*下面的else的js是我自己加的因为，点击有目录的文章后右侧sidebar会自动出来，文章会自动往左面走，因为margin是0 auto的。这个时候点击主页，</span></span><br><span class="line"><span class="comment">      文章还是在左面的没有回去，为了解决这个bug*/</span></span><br><span class="line">      <span class="keyword">if</span> (!!$(<span class="string">'.post-toc-wrap'</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">'.site-overview-wrap'</span>).css(<span class="string">'display'</span>) === <span class="string">'block'</span>) &#123;</span><br><span class="line">          $(<span class="string">'.post-toc-wrap'</span>).removeClass(<span class="string">'motion-element'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">'.post-toc-wrap'</span>).addClass(<span class="string">'motion-element'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var sidebarToggleLines = &#123;</span><br><span class="line">  lines: [],</span><br><span class="line">  push: function (line) &#123;</span><br><span class="line">    <span class="keyword">this</span>.lines.push(line);</span><br><span class="line">  &#125;,</span><br><span class="line">  init: function () &#123;</span><br><span class="line">    <span class="keyword">this</span>.lines.forEach(function (line) &#123;</span><br><span class="line">      line.init();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  arrow: function () &#123;</span><br><span class="line">    <span class="keyword">this</span>.lines.forEach(function (line) &#123;</span><br><span class="line">      line.arrow();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  close: function () &#123;</span><br><span class="line">    <span class="keyword">this</span>.lines.forEach(function (line) &#123;</span><br><span class="line">      line.close();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p></p><h3 id="添加bootstrp出现闪屏的现象"><a href="#添加bootstrp出现闪屏的现象" class="headerlink" title="添加bootstrp出现闪屏的现象"></a>添加bootstrp出现闪屏的现象</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.add</span><span class="params">(NexT.motion.middleWares.menu)</span>已经注释掉了</span><br></pre></td></tr></table></figure><p>貌似bootstrp不加也行,没有发现太需要重写的函数</p><h3 id="右边的sidebar鼠标滚动目录滑动事件没了"><a href="#右边的sidebar鼠标滚动目录滑动事件没了" class="headerlink" title="右边的sidebar鼠标滚动目录滑动事件没了"></a>右边的sidebar鼠标滚动目录滑动事件没了</h3><p>核心代码是utils.js中的initSidebarDimension（）函数<br>直接调用即可。<br>**强烈建议用有道词典看看那些个函数的注释，这个注释就写的很清楚，一开始我找了好久没有跟到相关的代码，最后，偶尔看到了，还好有点英语基础。<br>utils.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Init Sidebar &amp; TOC inner dimensions on all pages and for all schemes.</span></span><br><span class="line"><span class="comment">  * Need for Sidebar/TOC inner scrolling if content taller then viewport.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">initSidebarDimension</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> updateSidebarHeightTimer;</span><br><span class="line">   $(<span class="built_in">window</span>).on(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     updateSidebarHeightTimer &amp;&amp; clearTimeout(updateSidebarHeightTimer);</span><br><span class="line">     updateSidebarHeightTimer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> sidebarWrapperHeight = <span class="built_in">document</span>.body.clientHeight - NexT.utils.getSidebarSchemePadding();</span><br><span class="line">      updateSidebarHeight(sidebarWrapperHeight);</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p></p><h3 id="局部刷新文章不显示了，文章那里是空白的。"><a href="#局部刷新文章不显示了，文章那里是空白的。" class="headerlink" title="局部刷新文章不显示了，文章那里是空白的。"></a>局部刷新文章不显示了，文章那里是空白的。</h3><p>经过审查，是opacity变成了0，我自定义了一个回调函数。<br>opacity.js<br></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> opacity_js() &#123;</span><br><span class="line">  /<span class="regexp">/ $(".post-block").css(&#123;visibility: 'visible',opacity:1&#125;);</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ $(".post-header").css(&#123;visibility: 'visible',opacity:1&#125;);</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ $(".post-body").css(&#123;visibility: 'visible',opacity:1&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  $(".post-block").css(&#123;opacity:1&#125;);</span></span><br><span class="line"><span class="regexp">  $(".post-header").css(&#123;opacity:1&#125;);</span></span><br><span class="line"><span class="regexp">  $(".post-body").css(&#123;opacity:1&#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="评论没了"><a href="#评论没了" class="headerlink" title="评论没了"></a>评论没了</h3><p>我用的是来必力，其他的评论系统都是一样的操作，去评论系统的官网，或者阅读源码，跟到调用的api重新调用即可。<br><strong>注：下面紧跟着这个是之前错误的仅供记录，下面提供了正确的做法</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*判断#lv-container、comments是否为空，目前这是我找到最好的办法，因为不判断，进入首页或其他的页面会空指针异常。*/</span></span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">"#lv-container"</span>).length &gt; <span class="number">0</span> &amp;&amp;$(<span class="string">'.comments'</span>).length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">".comments"</span>).css(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    $.getScript(<span class="string">"https://cdn-city.livere.com/js/embed.dist.js"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>注：上面的版本是之前错误的，经过阅读源码</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">"#lv-container"</span>).length &gt; <span class="number">0</span> &amp;&amp;$(<span class="string">'.comments'</span>).length&gt;<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p></p><p>这句话是没用的,因为每个页面里面易经理加入了这个,并且js是没有重写完整的<br><strong>正确做法：</strong><br></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>(<span class="name">d</span>, s) &#123;</span><br><span class="line">    var j, e = d.getElementsByTagName(<span class="name">s</span>)[<span class="name">0</span>]<span class="comment">;</span></span><br><span class="line">    if (<span class="name">typeof</span> LivereTower === <span class="symbol">'function</span>') &#123; return<span class="comment">; &#125;</span></span><br><span class="line">    j = d.createElement(<span class="name">s</span>)<span class="comment">;</span></span><br><span class="line">    j.src = <span class="symbol">'https://cdn-city.livere.com/js/embed.dist.js</span>'<span class="comment">;</span></span><br><span class="line">    j.async = true<span class="comment">;</span></span><br><span class="line">    e.parentNode.insertBefore(<span class="name">j</span>, e)<span class="comment">;</span></span><br><span class="line">  &#125;)(<span class="name">document</span>, <span class="symbol">'script</span>')<span class="comment">;</span></span><br></pre></td></tr></table></figure><p></p><p>403的错误是localhost的原因，通过域名访问就没事了<br>不报错401就没问题<br>更新，虽然现实没问题，可是每次到首页总是会报错，id notfound，才疏学浅久久不能解决，决定换成gittalk评论。<br>参看我的另一篇文章。</p><h3 id="局部会闪一下"><a href="#局部会闪一下" class="headerlink" title="局部会闪一下"></a>局部会闪一下</h3><p>boostrap.js bootstrap是必须注释掉的</p><h3 id="阅读数没了"><a href="#阅读数没了" class="headerlink" title="阅读数没了"></a>阅读数没了</h3><p>自定义了一个js<br><strong>注意我第一行的注释</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lean_analytics</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*里面的参数原来是&#123;&#123;&#125;&#125;，可能会出现问题，所以在这里我直接将appid和key粘贴过来，具体问题是什么不详*/</span></span><br><span class="line">  AV.initialize(<span class="string">"6og9b7lpddMqazBCDe8z4HqL-gzGzoHsz"</span>, <span class="string">"faKN7dalSdXLmYYJTRq98B1f"</span>);</span><br><span class="line">  $.getScript(<span class="string">"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params">Counter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(Counter);</span><br><span class="line">    <span class="keyword">var</span> entries = [];</span><br><span class="line">    <span class="keyword">var</span> $visitors = $(<span class="string">".leancloud_visitors"</span>);</span><br><span class="line"></span><br><span class="line">    $visitors.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      entries.push( $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>).trim() );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    query.containedIn(<span class="string">'url'</span>, entries);</span><br><span class="line">    query.find()</span><br><span class="line">      .done(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> COUNT_CONTAINER_REF = <span class="string">'.leancloud-visitors-count'</span>;</span><br><span class="line">        <span class="keyword">if</span> (results.length === <span class="number">0</span>) &#123;</span><br><span class="line">          $visitors.find(COUNT_CONTAINER_REF).text(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; results.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> item = results[i];</span><br><span class="line">          <span class="keyword">var</span> url = item.get(<span class="string">'url'</span>);</span><br><span class="line">          <span class="keyword">var</span> time = item.get(<span class="string">'time'</span>);</span><br><span class="line">          <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(url);</span><br><span class="line">          $(element).find(COUNT_CONTAINER_REF).text(time);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> url = entries[i];</span><br><span class="line">          <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(url);</span><br><span class="line">          <span class="keyword">var</span> countSpan = $(element).find(COUNT_CONTAINER_REF);</span><br><span class="line">          <span class="keyword">if</span>( countSpan.text() == <span class="string">''</span>) &#123;</span><br><span class="line">            countSpan.text(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .fail(<span class="function"><span class="keyword">function</span> (<span class="params">object, error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Error: "</span> + error.code + <span class="string">" "</span> + error.message);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params">Counter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $visitors = $(<span class="string">".leancloud_visitors"</span>);</span><br><span class="line">    <span class="keyword">var</span> url = $visitors.attr(<span class="string">'id'</span>).trim();</span><br><span class="line">    <span class="keyword">var</span> title = $visitors.attr(<span class="string">'data-flag-title'</span>).trim();</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(Counter);</span><br><span class="line"></span><br><span class="line">    query.equalTo(<span class="string">"url"</span>, url);</span><br><span class="line">    query.find(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (results.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> counter = results[<span class="number">0</span>];</span><br><span class="line">          counter.fetchWhenSave(<span class="literal">true</span>);</span><br><span class="line">          counter.increment(<span class="string">"time"</span>);</span><br><span class="line">          counter.save(<span class="literal">null</span>, &#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">counter</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> $element = $(<span class="built_in">document</span>.getElementById(url));</span><br><span class="line">              $element.find(<span class="string">'.leancloud-visitors-count'</span>).text(counter.get(<span class="string">'time'</span>));</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">counter, error</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'Failed to save Visitor num, with error message: '</span> + error.message);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> newcounter = <span class="keyword">new</span> Counter();</span><br><span class="line">          <span class="comment">/* Set ACL */</span></span><br><span class="line">          <span class="keyword">var</span> acl = <span class="keyword">new</span> AV.ACL();</span><br><span class="line">          acl.setPublicReadAccess(<span class="literal">true</span>);</span><br><span class="line">          acl.setPublicWriteAccess(<span class="literal">true</span>);</span><br><span class="line">          newcounter.setACL(acl);</span><br><span class="line">          <span class="comment">/* End Set ACL */</span></span><br><span class="line">          newcounter.set(<span class="string">"title"</span>, title);</span><br><span class="line">          newcounter.set(<span class="string">"url"</span>, url);</span><br><span class="line">          newcounter.set(<span class="string">"time"</span>, <span class="number">1</span>);</span><br><span class="line">          newcounter.save(<span class="literal">null</span>, &#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">newcounter</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> $element = $(<span class="built_in">document</span>.getElementById(url));</span><br><span class="line">              $element.find(<span class="string">'.leancloud-visitors-count'</span>).text(newcounter.get(<span class="string">'time'</span>));</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">newcounter, error</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'Failed to create'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error:'</span> + error.code + <span class="string">" "</span> + error.message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> Counter = AV.Object.extend(<span class="string">"Counter"</span>);</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">'.leancloud_visitors'</span>).length == <span class="number">1</span>) &#123;</span><br><span class="line">    addCount(Counter);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">'.post-title-link'</span>).length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    showTime(Counter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="百度统计-解决了footer自动推送"><a href="#百度统计-解决了footer自动推送" class="headerlink" title="百度统计(解决了footer自动推送)"></a>百度统计(解决了footer自动推送)</h3><p>baidutuisong.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baidutuisong</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">    bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">  s.parentNode.insertBefore(bp, s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="不蒜子阅读次数失效-解决"><a href="#不蒜子阅读次数失效-解决" class="headerlink" title="不蒜子阅读次数失效(解决)"></a>不蒜子阅读次数失效(解决)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">.getScript(<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>);</span></span><br></pre></td></tr></table></figure><h3 id="分类动态（css样式，js不行）"><a href="#分类动态（css样式，js不行）" class="headerlink" title="分类动态（css样式，js不行）"></a>分类动态（css样式，js不行）</h3><p>category.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">category_js</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//在a标签前面加个&gt;</span></span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">".jiantou"</span>).length==<span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">"&lt;div class='jiantou' style='float: left'&gt; &amp;nbsp&gt;&amp;nbsp &lt;/div&gt;"</span>).prependTo(<span class="string">".category-list-item"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//首相将子元素ul隐藏</span></span><br><span class="line">  $(<span class="string">".category-list-child"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">  <span class="comment">//改变a标签的样式，"display":"inline-block"同时拥有块元素和行元素的两种特性。</span></span><br><span class="line">  <span class="comment">//放到了css中</span></span><br><span class="line">  <span class="comment">// $(".category-list-link").css(&#123;"width":"1000px","display":"inline-block"&#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//加入过滤器功能，因为if貌似不支持this功能，a标签如果有同级元素ul的话会使跳转功能失效，没有同级元素ul的话继续跳转</span></span><br><span class="line">  $(<span class="string">".category-list-link"</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="keyword">this</span>).siblings(<span class="string">".category-list-child"</span>).length&gt;<span class="number">0</span></span><br><span class="line">  &#125;).attr(<span class="string">"href"</span>,<span class="string">"javascript:void(0)"</span>).css(&#123;<span class="string">"font-weight"</span>:<span class="string">"bold"</span>&#125;);</span><br><span class="line">  <span class="comment">//点击出现隐藏功能，a标签如果有同级元素ul的话会使跳转功能失效，没有同级元素ul的话继续跳转，上面已经做了处理。</span></span><br><span class="line">  $(<span class="string">".category-list-link"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).siblings(<span class="string">".category-list-child"</span>).slideToggle();</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  $(<span class="string">".posts-expand .post-body ul li "</span>).css(<span class="string">"list-style-type"</span>, <span class="string">"none"</span>);</span><br><span class="line">  <span class="comment">//去掉下划线</span></span><br><span class="line">  $(<span class="string">".category-list-link "</span>).css(<span class="string">"border-bottom"</span>, <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="分享失败"><a href="#分享失败" class="headerlink" title="分享失败"></a>分享失败</h3><p>原来用的addthis，不行，又换百度，还是不行，干脆自己整了一个<br>网上有share.js(有兴趣的自己学习一下)<br>share.js<br></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// define([<span class="string">'jquery.share.min'</span>],<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">var $<span class="built_in">config</span> = &#123;</span><br><span class="line">  sites : [<span class="string">'weibo'</span>,<span class="string">'qq'</span>, <span class="string">'wechat'</span>,<span class="string">'tencent'</span>,<span class="string">'qzone'</span>,<span class="string">'douban'</span>, <span class="string">'facebook'</span>,  <span class="string">'google'</span>,<span class="string">'twitter'</span>],</span><br><span class="line">  disabled: [ <span class="string">'linkedin'</span>, <span class="string">'diandian'</span>],</span><br><span class="line">  wechatQrcodeTitle: <span class="string">"微信扫一扫"</span>,</span><br><span class="line">  wechatQrcodeHelper: <span class="string">'&lt;p&gt;微信扫一扫，右上角分享&lt;/p&gt;'</span>,</span><br><span class="line">  source: <span class="string">'Leesin Dong'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">'.post-spread'</span>).share($<span class="built_in">config</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjaxshare</span><span class="params">()</span></span> &#123;</span><br><span class="line">  $(<span class="string">'.post-spread'</span>).share($<span class="built_in">config</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="评分系统（已经舍弃，感觉无用）"><a href="#评分系统（已经舍弃，感觉无用）" class="headerlink" title="评分系统（已经舍弃，感觉无用）"></a>评分系统（已经舍弃，感觉无用）</h3><h3 id="懒加载函数"><a href="#懒加载函数" class="headerlink" title="懒加载函数"></a>懒加载函数</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'img'</span>).lazyload(&#123;</span><br><span class="line"><span class="symbol">    placeholder:</span> <span class="string">'/images/loading.gif'</span>,</span><br><span class="line"><span class="symbol">    effect:</span> <span class="string">'fadeIn'</span>,</span><br><span class="line">    <span class="string">threshold :</span> <span class="number">100</span>,</span><br><span class="line">    <span class="string">failure_limit :</span> <span class="number">20</span>,</span><br><span class="line">    <span class="string">skip_invisible :</span> <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="忘了最后最重要的一点一点，点击浏览器的返回前进按钮，特效还是失败了"><a href="#忘了最后最重要的一点一点，点击浏览器的返回前进按钮，特效还是失败了" class="headerlink" title="忘了最后最重要的一点一点，点击浏览器的返回前进按钮，特效还是失败了"></a>忘了最后最重要的一点一点，点击浏览器的返回前进按钮，特效还是失败了</h1><p>辛辛苦苦google了三天的结果。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'popstate.pjax'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pjax();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>暂时先这么多吧~<br>喜欢的点个星星，加个关注。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_10.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;一篇关于在next主题中加入pjax的文章，让你的文章如钻石般夺目。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://mmmmmm.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://mmmmmm.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>写给自己的话</title>
    <link href="http://mmmmmm.me/To_myself.html"/>
    <id>http://mmmmmm.me/To_myself.html</id>
    <published>2018-10-15T06:57:00.000Z</published>
    <updated>2019-01-27T10:24:16.438Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --><p><img alt="upload successful" data-original="/images/my_blog_0.png"></p><blockquote><ul><li>人生是一场旅程。我们经历了几次轮回，才换来这个旅程。而这个旅程很短，因此不妨大胆一些，不妨大胆一些去爱一个人，去攀一座山，去追一个梦……有很多事我都不明白。但我相信一件事。上天让我们来到这个世上，就是为了让我们创造奇迹。</li></ul></blockquote><a id="more"></a><h1 id="短暂的一生"><a href="#短暂的一生" class="headerlink" title="短暂的一生"></a>短暂的一生</h1><blockquote><ul><li>人这一辈子除了死，什么都不宜迟，不要再去等永远，再久的永远也是有限的，四月，趁阳光正好，趁微风不噪， 趁繁花还未开至荼蘼，好好的去爱，尽情的去做，<br>不要等到老了，才发觉，该说的话还没说，该做的事还没做，该见的人还没见，该牵的手，还没有牵…</li></ul></blockquote><blockquote><ul><li>如果一个人只是度过一天算一天，什么希望也没有，他的生命实际上也就停止了。</li></ul></blockquote><blockquote><ul><li>人生一世不就是为了化短暂的事物为永久的吗？要做到这一步，就须懂得如何珍视这短暂和永久。</li></ul></blockquote><blockquote><ul><li>一个人如果碌碌无为，只为自己渺小的生存而虚度一生，那么，即使他高寿活到一百岁，又有什么价值和意义呢？</li></ul></blockquote><blockquote><ul><li>人生就像一本书，傻瓜们走马看花似地随手翻阅它，聪明的人用心地阅读它。因为他知道这本书只能读一次。</li></ul></blockquote><blockquote><ul><li>做自己喜欢的事情吧！去接触新的事物吧！去做时间的朋友吧！</li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Feb 07 2019 16:57:21 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;img alt=&quot;upload successful&quot; data-original=&quot;/images/my_blog_0.png&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;人生是一场旅程。我们经历了几次轮回，才换来这个旅程。而这个旅程很短，因此不妨大胆一些，不妨大胆一些去爱一个人，去攀一座山，去追一个梦……有很多事我都不明白。但我相信一件事。上天让我们来到这个世上，就是为了让我们创造奇迹。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="short life" scheme="http://mmmmmm.me/categories/short-life/"/>
    
      <category term="short life" scheme="http://mmmmmm.me/categories/short-life/short-life/"/>
    
    
      <category term="人生" scheme="http://mmmmmm.me/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
